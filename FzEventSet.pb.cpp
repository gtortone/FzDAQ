// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FzEventSet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FzEventSet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DAQ {

namespace {

const ::google::protobuf::Descriptor* Energy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Energy_reflection_ = NULL;
const ::google::protobuf::Descriptor* Waveform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Waveform_reflection_ = NULL;
const ::google::protobuf::Descriptor* FzData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FzData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FzData_FzDataType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FzHit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FzHit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FzHit_FzFec_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FzHit_FzTelescope_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FzHit_FzDetector_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FzFee_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FzFee_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FzFee_FzFec_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FzBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FzBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* FzEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FzEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* FzEventSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FzEventSet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FzEventSet_2eproto() {
  protobuf_AddDesc_FzEventSet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FzEventSet.proto");
  GOOGLE_CHECK(file != NULL);
  Energy_descriptor_ = file->message_type(0);
  static const int Energy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Energy, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Energy, len_error_),
  };
  Energy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Energy_descriptor_,
      Energy::default_instance_,
      Energy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Energy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Energy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Energy));
  Waveform_descriptor_ = file->message_type(1);
  static const int Waveform_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waveform, pretrig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waveform, sample_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waveform, len_error_),
  };
  Waveform_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Waveform_descriptor_,
      Waveform::default_instance_,
      Waveform_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waveform, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waveform, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Waveform));
  FzData_descriptor_ = file->message_type(2);
  static const int FzData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzData, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzData, waveform_),
  };
  FzData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FzData_descriptor_,
      FzData::default_instance_,
      FzData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FzData));
  FzData_FzDataType_descriptor_ = FzData_descriptor_->enum_type(0);
  FzHit_descriptor_ = file->message_type(3);
  static const int FzHit_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzHit, ec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzHit, telid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzHit, detid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzHit, feeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzHit, gttag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzHit, dettag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzHit, data_),
  };
  FzHit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FzHit_descriptor_,
      FzHit::default_instance_,
      FzHit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzHit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzHit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FzHit));
  FzHit_FzFec_descriptor_ = FzHit_descriptor_->enum_type(0);
  FzHit_FzTelescope_descriptor_ = FzHit_descriptor_->enum_type(1);
  FzHit_FzDetector_descriptor_ = FzHit_descriptor_->enum_type(2);
  FzFee_descriptor_ = file->message_type(4);
  static const int FzFee_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzFee, feeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzFee, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzFee, len_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzFee, crc_error_),
  };
  FzFee_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FzFee_descriptor_,
      FzFee::default_instance_,
      FzFee_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzFee, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzFee, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FzFee));
  FzFee_FzFec_descriptor_ = FzFee_descriptor_->enum_type(0);
  FzBlock_descriptor_ = file->message_type(5);
  static const int FzBlock_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzBlock, blkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzBlock, fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzBlock, len_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzBlock, crc_error_),
  };
  FzBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FzBlock_descriptor_,
      FzBlock::default_instance_,
      FzBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FzBlock));
  FzEvent_descriptor_ = file->message_type(6);
  static const int FzEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzEvent, ec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzEvent, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzEvent, regid_),
  };
  FzEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FzEvent_descriptor_,
      FzEvent::default_instance_,
      FzEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FzEvent));
  FzEventSet_descriptor_ = file->message_type(7);
  static const int FzEventSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzEventSet, ev_),
  };
  FzEventSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FzEventSet_descriptor_,
      FzEventSet::default_instance_,
      FzEventSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzEventSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzEventSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FzEventSet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FzEventSet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Energy_descriptor_, &Energy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Waveform_descriptor_, &Waveform::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FzData_descriptor_, &FzData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FzHit_descriptor_, &FzHit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FzFee_descriptor_, &FzFee::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FzBlock_descriptor_, &FzBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FzEvent_descriptor_, &FzEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FzEventSet_descriptor_, &FzEventSet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FzEventSet_2eproto() {
  delete Energy::default_instance_;
  delete Energy_reflection_;
  delete Waveform::default_instance_;
  delete Waveform_reflection_;
  delete FzData::default_instance_;
  delete FzData_reflection_;
  delete FzHit::default_instance_;
  delete FzHit_reflection_;
  delete FzFee::default_instance_;
  delete FzFee_reflection_;
  delete FzBlock::default_instance_;
  delete FzBlock_reflection_;
  delete FzEvent::default_instance_;
  delete FzEvent_reflection_;
  delete FzEventSet::default_instance_;
  delete FzEventSet_reflection_;
}

void protobuf_AddDesc_FzEventSet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020FzEventSet.proto\022\003DAQ\"*\n\006Energy\022\r\n\005val"
    "ue\030\001 \003(\r\022\021\n\tlen_error\030\002 \002(\010\"B\n\010Waveform\022"
    "\017\n\007pretrig\030\001 \002(\r\022\022\n\006sample\030\002 \003(\005B\002\020\001\022\021\n\t"
    "len_error\030\003 \002(\010\"\300\001\n\006FzData\022$\n\004type\030\001 \002(\016"
    "2\026.DAQ.FzData.FzDataType\022\033\n\006energy\030\002 \001(\013"
    "2\013.DAQ.Energy\022\037\n\010waveform\030\003 \001(\0132\r.DAQ.Wa"
    "veform\"R\n\nFzDataType\022\007\n\003QH1\020\000\022\006\n\002I1\020\001\022\007\n"
    "\003QL1\020\002\022\006\n\002Q2\020\003\022\006\n\002I2\020\004\022\006\n\002Q3\020\005\022\007\n\003ADC\020\006\022"
    "\t\n\005UNKDT\020\007\"\204\003\n\005FzHit\022\n\n\002ec\030\001 \002(\r\022%\n\005teli"
    "d\030\002 \002(\0162\026.DAQ.FzHit.FzTelescope\022$\n\005detid"
    "\030\003 \002(\0162\025.DAQ.FzHit.FzDetector\022\037\n\005feeid\030\004"
    " \002(\0162\020.DAQ.FzHit.FzFec\022\r\n\005gttag\030\005 \002(\r\022\016\n"
    "\006dettag\030\006 \002(\r\022\031\n\004data\030\007 \003(\0132\013.DAQ.FzData"
    "\"m\n\005FzFec\022\010\n\004FEC0\020\000\022\010\n\004FEC1\020\001\022\010\n\004FEC2\020\002\022"
    "\010\n\004FEC3\020\003\022\010\n\004FEC4\020\004\022\010\n\004FEC5\020\005\022\010\n\004FEC6\020\006\022"
    "\010\n\004FEC7\020\007\022\010\n\004ADCF\020\017\022\n\n\006UNKFEC\020\020\"%\n\013FzTel"
    "escope\022\005\n\001A\020\000\022\005\n\001B\020\001\022\010\n\004UNKT\020\002\"1\n\nFzDete"
    "ctor\022\007\n\003Si1\020\000\022\007\n\003Si2\020\001\022\007\n\003CsI\020\002\022\010\n\004UNKD\020"
    "\003\"\326\001\n\005FzFee\022\037\n\005feeid\030\001 \002(\0162\020.DAQ.FzFee.F"
    "zFec\022\027\n\003hit\030\002 \003(\0132\n.DAQ.FzHit\022\021\n\tlen_err"
    "or\030\003 \002(\010\022\021\n\tcrc_error\030\004 \002(\010\"m\n\005FzFec\022\010\n\004"
    "FEC0\020\000\022\010\n\004FEC1\020\001\022\010\n\004FEC2\020\002\022\010\n\004FEC3\020\003\022\010\n\004"
    "FEC4\020\004\022\010\n\004FEC5\020\005\022\010\n\004FEC6\020\006\022\010\n\004FEC7\020\007\022\010\n\004"
    "ADCF\020\017\022\n\n\006UNKFEC\020\020\"W\n\007FzBlock\022\r\n\005blkid\030\001"
    " \002(\r\022\027\n\003fee\030\002 \003(\0132\n.DAQ.FzFee\022\021\n\tlen_err"
    "or\030\003 \002(\010\022\021\n\tcrc_error\030\004 \002(\010\"A\n\007FzEvent\022\n"
    "\n\002ec\030\001 \002(\r\022\033\n\005block\030\002 \003(\0132\014.DAQ.FzBlock\022"
    "\r\n\005regid\030\003 \002(\r\"&\n\nFzEventSet\022\030\n\002ev\030\001 \003(\013"
    "2\014.DAQ.FzEventB\005H\001\200\001\000", 1141);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FzEventSet.proto", &protobuf_RegisterTypes);
  Energy::default_instance_ = new Energy();
  Waveform::default_instance_ = new Waveform();
  FzData::default_instance_ = new FzData();
  FzHit::default_instance_ = new FzHit();
  FzFee::default_instance_ = new FzFee();
  FzBlock::default_instance_ = new FzBlock();
  FzEvent::default_instance_ = new FzEvent();
  FzEventSet::default_instance_ = new FzEventSet();
  Energy::default_instance_->InitAsDefaultInstance();
  Waveform::default_instance_->InitAsDefaultInstance();
  FzData::default_instance_->InitAsDefaultInstance();
  FzHit::default_instance_->InitAsDefaultInstance();
  FzFee::default_instance_->InitAsDefaultInstance();
  FzBlock::default_instance_->InitAsDefaultInstance();
  FzEvent::default_instance_->InitAsDefaultInstance();
  FzEventSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FzEventSet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FzEventSet_2eproto {
  StaticDescriptorInitializer_FzEventSet_2eproto() {
    protobuf_AddDesc_FzEventSet_2eproto();
  }
} static_descriptor_initializer_FzEventSet_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Energy::kValueFieldNumber;
const int Energy::kLenErrorFieldNumber;
#endif  // !_MSC_VER

Energy::Energy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DAQ.Energy)
}

void Energy::InitAsDefaultInstance() {
}

Energy::Energy(const Energy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DAQ.Energy)
}

void Energy::SharedCtor() {
  _cached_size_ = 0;
  len_error_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Energy::~Energy() {
  // @@protoc_insertion_point(destructor:DAQ.Energy)
  SharedDtor();
}

void Energy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Energy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Energy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Energy_descriptor_;
}

const Energy& Energy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FzEventSet_2eproto();
  return *default_instance_;
}

Energy* Energy::default_instance_ = NULL;

Energy* Energy::New() const {
  return new Energy;
}

void Energy::Clear() {
  len_error_ = false;
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Energy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DAQ.Energy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 value = 1;
      case 1: {
        if (tag == 8) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_value())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_value;
        if (input->ExpectTag(16)) goto parse_len_error;
        break;
      }

      // required bool len_error = 2;
      case 2: {
        if (tag == 16) {
         parse_len_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &len_error_)));
          set_has_len_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DAQ.Energy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DAQ.Energy)
  return false;
#undef DO_
}

void Energy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DAQ.Energy)
  // repeated uint32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->value(i), output);
  }

  // required bool len_error = 2;
  if (has_len_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->len_error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DAQ.Energy)
}

::google::protobuf::uint8* Energy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DAQ.Energy)
  // repeated uint32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->value(i), target);
  }

  // required bool len_error = 2;
  if (has_len_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->len_error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DAQ.Energy)
  return target;
}

int Energy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool len_error = 2;
    if (has_len_error()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 value = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Energy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Energy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Energy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Energy::MergeFrom(const Energy& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_len_error()) {
      set_len_error(from.len_error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Energy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Energy::CopyFrom(const Energy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Energy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void Energy::Swap(Energy* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(len_error_, other->len_error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Energy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Energy_descriptor_;
  metadata.reflection = Energy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Waveform::kPretrigFieldNumber;
const int Waveform::kSampleFieldNumber;
const int Waveform::kLenErrorFieldNumber;
#endif  // !_MSC_VER

Waveform::Waveform()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DAQ.Waveform)
}

void Waveform::InitAsDefaultInstance() {
}

Waveform::Waveform(const Waveform& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DAQ.Waveform)
}

void Waveform::SharedCtor() {
  _cached_size_ = 0;
  pretrig_ = 0u;
  len_error_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Waveform::~Waveform() {
  // @@protoc_insertion_point(destructor:DAQ.Waveform)
  SharedDtor();
}

void Waveform::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Waveform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Waveform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Waveform_descriptor_;
}

const Waveform& Waveform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FzEventSet_2eproto();
  return *default_instance_;
}

Waveform* Waveform::default_instance_ = NULL;

Waveform* Waveform::New() const {
  return new Waveform;
}

void Waveform::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Waveform*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pretrig_, len_error_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  sample_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Waveform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DAQ.Waveform)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pretrig = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pretrig_)));
          set_has_pretrig();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sample;
        break;
      }

      // repeated int32 sample = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_sample:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_sample())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_sample())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_len_error;
        break;
      }

      // required bool len_error = 3;
      case 3: {
        if (tag == 24) {
         parse_len_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &len_error_)));
          set_has_len_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DAQ.Waveform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DAQ.Waveform)
  return false;
#undef DO_
}

void Waveform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DAQ.Waveform)
  // required uint32 pretrig = 1;
  if (has_pretrig()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pretrig(), output);
  }

  // repeated int32 sample = 2 [packed = true];
  if (this->sample_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_sample_cached_byte_size_);
  }
  for (int i = 0; i < this->sample_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->sample(i), output);
  }

  // required bool len_error = 3;
  if (has_len_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->len_error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DAQ.Waveform)
}

::google::protobuf::uint8* Waveform::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DAQ.Waveform)
  // required uint32 pretrig = 1;
  if (has_pretrig()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pretrig(), target);
  }

  // repeated int32 sample = 2 [packed = true];
  if (this->sample_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _sample_cached_byte_size_, target);
  }
  for (int i = 0; i < this->sample_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->sample(i), target);
  }

  // required bool len_error = 3;
  if (has_len_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->len_error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DAQ.Waveform)
  return target;
}

int Waveform::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pretrig = 1;
    if (has_pretrig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pretrig());
    }

    // required bool len_error = 3;
    if (has_len_error()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 sample = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->sample_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->sample(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sample_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Waveform::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Waveform* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Waveform*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Waveform::MergeFrom(const Waveform& from) {
  GOOGLE_CHECK_NE(&from, this);
  sample_.MergeFrom(from.sample_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pretrig()) {
      set_pretrig(from.pretrig());
    }
    if (from.has_len_error()) {
      set_len_error(from.len_error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Waveform::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Waveform::CopyFrom(const Waveform& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Waveform::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void Waveform::Swap(Waveform* other) {
  if (other != this) {
    std::swap(pretrig_, other->pretrig_);
    sample_.Swap(&other->sample_);
    std::swap(len_error_, other->len_error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Waveform::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Waveform_descriptor_;
  metadata.reflection = Waveform_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FzData_FzDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FzData_FzDataType_descriptor_;
}
bool FzData_FzDataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FzData_FzDataType FzData::QH1;
const FzData_FzDataType FzData::I1;
const FzData_FzDataType FzData::QL1;
const FzData_FzDataType FzData::Q2;
const FzData_FzDataType FzData::I2;
const FzData_FzDataType FzData::Q3;
const FzData_FzDataType FzData::ADC;
const FzData_FzDataType FzData::UNKDT;
const FzData_FzDataType FzData::FzDataType_MIN;
const FzData_FzDataType FzData::FzDataType_MAX;
const int FzData::FzDataType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FzData::kTypeFieldNumber;
const int FzData::kEnergyFieldNumber;
const int FzData::kWaveformFieldNumber;
#endif  // !_MSC_VER

FzData::FzData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DAQ.FzData)
}

void FzData::InitAsDefaultInstance() {
  energy_ = const_cast< ::DAQ::Energy*>(&::DAQ::Energy::default_instance());
  waveform_ = const_cast< ::DAQ::Waveform*>(&::DAQ::Waveform::default_instance());
}

FzData::FzData(const FzData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DAQ.FzData)
}

void FzData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  energy_ = NULL;
  waveform_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FzData::~FzData() {
  // @@protoc_insertion_point(destructor:DAQ.FzData)
  SharedDtor();
}

void FzData::SharedDtor() {
  if (this != default_instance_) {
    delete energy_;
    delete waveform_;
  }
}

void FzData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FzData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FzData_descriptor_;
}

const FzData& FzData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FzEventSet_2eproto();
  return *default_instance_;
}

FzData* FzData::default_instance_ = NULL;

FzData* FzData::New() const {
  return new FzData;
}

void FzData::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 0;
    if (has_energy()) {
      if (energy_ != NULL) energy_->::DAQ::Energy::Clear();
    }
    if (has_waveform()) {
      if (waveform_ != NULL) waveform_->::DAQ::Waveform::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FzData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DAQ.FzData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DAQ.FzData.FzDataType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DAQ::FzData_FzDataType_IsValid(value)) {
            set_type(static_cast< ::DAQ::FzData_FzDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_energy;
        break;
      }

      // optional .DAQ.Energy energy = 2;
      case 2: {
        if (tag == 18) {
         parse_energy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_energy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_waveform;
        break;
      }

      // optional .DAQ.Waveform waveform = 3;
      case 3: {
        if (tag == 26) {
         parse_waveform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_waveform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DAQ.FzData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DAQ.FzData)
  return false;
#undef DO_
}

void FzData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DAQ.FzData)
  // required .DAQ.FzData.FzDataType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .DAQ.Energy energy = 2;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->energy(), output);
  }

  // optional .DAQ.Waveform waveform = 3;
  if (has_waveform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->waveform(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DAQ.FzData)
}

::google::protobuf::uint8* FzData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DAQ.FzData)
  // required .DAQ.FzData.FzDataType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .DAQ.Energy energy = 2;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->energy(), target);
  }

  // optional .DAQ.Waveform waveform = 3;
  if (has_waveform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->waveform(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DAQ.FzData)
  return target;
}

int FzData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DAQ.FzData.FzDataType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .DAQ.Energy energy = 2;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->energy());
    }

    // optional .DAQ.Waveform waveform = 3;
    if (has_waveform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->waveform());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FzData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FzData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FzData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FzData::MergeFrom(const FzData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_energy()) {
      mutable_energy()->::DAQ::Energy::MergeFrom(from.energy());
    }
    if (from.has_waveform()) {
      mutable_waveform()->::DAQ::Waveform::MergeFrom(from.waveform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FzData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FzData::CopyFrom(const FzData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FzData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_energy()) {
    if (!this->energy().IsInitialized()) return false;
  }
  if (has_waveform()) {
    if (!this->waveform().IsInitialized()) return false;
  }
  return true;
}

void FzData::Swap(FzData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(energy_, other->energy_);
    std::swap(waveform_, other->waveform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FzData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FzData_descriptor_;
  metadata.reflection = FzData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FzHit_FzFec_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FzHit_FzFec_descriptor_;
}
bool FzHit_FzFec_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FzHit_FzFec FzHit::FEC0;
const FzHit_FzFec FzHit::FEC1;
const FzHit_FzFec FzHit::FEC2;
const FzHit_FzFec FzHit::FEC3;
const FzHit_FzFec FzHit::FEC4;
const FzHit_FzFec FzHit::FEC5;
const FzHit_FzFec FzHit::FEC6;
const FzHit_FzFec FzHit::FEC7;
const FzHit_FzFec FzHit::ADCF;
const FzHit_FzFec FzHit::UNKFEC;
const FzHit_FzFec FzHit::FzFec_MIN;
const FzHit_FzFec FzHit::FzFec_MAX;
const int FzHit::FzFec_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* FzHit_FzTelescope_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FzHit_FzTelescope_descriptor_;
}
bool FzHit_FzTelescope_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FzHit_FzTelescope FzHit::A;
const FzHit_FzTelescope FzHit::B;
const FzHit_FzTelescope FzHit::UNKT;
const FzHit_FzTelescope FzHit::FzTelescope_MIN;
const FzHit_FzTelescope FzHit::FzTelescope_MAX;
const int FzHit::FzTelescope_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* FzHit_FzDetector_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FzHit_FzDetector_descriptor_;
}
bool FzHit_FzDetector_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FzHit_FzDetector FzHit::Si1;
const FzHit_FzDetector FzHit::Si2;
const FzHit_FzDetector FzHit::CsI;
const FzHit_FzDetector FzHit::UNKD;
const FzHit_FzDetector FzHit::FzDetector_MIN;
const FzHit_FzDetector FzHit::FzDetector_MAX;
const int FzHit::FzDetector_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FzHit::kEcFieldNumber;
const int FzHit::kTelidFieldNumber;
const int FzHit::kDetidFieldNumber;
const int FzHit::kFeeidFieldNumber;
const int FzHit::kGttagFieldNumber;
const int FzHit::kDettagFieldNumber;
const int FzHit::kDataFieldNumber;
#endif  // !_MSC_VER

FzHit::FzHit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DAQ.FzHit)
}

void FzHit::InitAsDefaultInstance() {
}

FzHit::FzHit(const FzHit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DAQ.FzHit)
}

void FzHit::SharedCtor() {
  _cached_size_ = 0;
  ec_ = 0u;
  telid_ = 0;
  detid_ = 0;
  feeid_ = 0;
  gttag_ = 0u;
  dettag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FzHit::~FzHit() {
  // @@protoc_insertion_point(destructor:DAQ.FzHit)
  SharedDtor();
}

void FzHit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FzHit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FzHit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FzHit_descriptor_;
}

const FzHit& FzHit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FzEventSet_2eproto();
  return *default_instance_;
}

FzHit* FzHit::default_instance_ = NULL;

FzHit* FzHit::New() const {
  return new FzHit;
}

void FzHit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FzHit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(ec_, dettag_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FzHit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DAQ.FzHit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ec = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ec_)));
          set_has_ec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_telid;
        break;
      }

      // required .DAQ.FzHit.FzTelescope telid = 2;
      case 2: {
        if (tag == 16) {
         parse_telid:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DAQ::FzHit_FzTelescope_IsValid(value)) {
            set_telid(static_cast< ::DAQ::FzHit_FzTelescope >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_detid;
        break;
      }

      // required .DAQ.FzHit.FzDetector detid = 3;
      case 3: {
        if (tag == 24) {
         parse_detid:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DAQ::FzHit_FzDetector_IsValid(value)) {
            set_detid(static_cast< ::DAQ::FzHit_FzDetector >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_feeid;
        break;
      }

      // required .DAQ.FzHit.FzFec feeid = 4;
      case 4: {
        if (tag == 32) {
         parse_feeid:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DAQ::FzHit_FzFec_IsValid(value)) {
            set_feeid(static_cast< ::DAQ::FzHit_FzFec >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gttag;
        break;
      }

      // required uint32 gttag = 5;
      case 5: {
        if (tag == 40) {
         parse_gttag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gttag_)));
          set_has_gttag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dettag;
        break;
      }

      // required uint32 dettag = 6;
      case 6: {
        if (tag == 48) {
         parse_dettag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dettag_)));
          set_has_dettag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data;
        break;
      }

      // repeated .DAQ.FzData data = 7;
      case 7: {
        if (tag == 58) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DAQ.FzHit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DAQ.FzHit)
  return false;
#undef DO_
}

void FzHit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DAQ.FzHit)
  // required uint32 ec = 1;
  if (has_ec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ec(), output);
  }

  // required .DAQ.FzHit.FzTelescope telid = 2;
  if (has_telid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->telid(), output);
  }

  // required .DAQ.FzHit.FzDetector detid = 3;
  if (has_detid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->detid(), output);
  }

  // required .DAQ.FzHit.FzFec feeid = 4;
  if (has_feeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->feeid(), output);
  }

  // required uint32 gttag = 5;
  if (has_gttag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gttag(), output);
  }

  // required uint32 dettag = 6;
  if (has_dettag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dettag(), output);
  }

  // repeated .DAQ.FzData data = 7;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DAQ.FzHit)
}

::google::protobuf::uint8* FzHit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DAQ.FzHit)
  // required uint32 ec = 1;
  if (has_ec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ec(), target);
  }

  // required .DAQ.FzHit.FzTelescope telid = 2;
  if (has_telid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->telid(), target);
  }

  // required .DAQ.FzHit.FzDetector detid = 3;
  if (has_detid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->detid(), target);
  }

  // required .DAQ.FzHit.FzFec feeid = 4;
  if (has_feeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->feeid(), target);
  }

  // required uint32 gttag = 5;
  if (has_gttag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gttag(), target);
  }

  // required uint32 dettag = 6;
  if (has_dettag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dettag(), target);
  }

  // repeated .DAQ.FzData data = 7;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DAQ.FzHit)
  return target;
}

int FzHit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ec = 1;
    if (has_ec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ec());
    }

    // required .DAQ.FzHit.FzTelescope telid = 2;
    if (has_telid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->telid());
    }

    // required .DAQ.FzHit.FzDetector detid = 3;
    if (has_detid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->detid());
    }

    // required .DAQ.FzHit.FzFec feeid = 4;
    if (has_feeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->feeid());
    }

    // required uint32 gttag = 5;
    if (has_gttag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gttag());
    }

    // required uint32 dettag = 6;
    if (has_dettag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dettag());
    }

  }
  // repeated .DAQ.FzData data = 7;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FzHit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FzHit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FzHit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FzHit::MergeFrom(const FzHit& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ec()) {
      set_ec(from.ec());
    }
    if (from.has_telid()) {
      set_telid(from.telid());
    }
    if (from.has_detid()) {
      set_detid(from.detid());
    }
    if (from.has_feeid()) {
      set_feeid(from.feeid());
    }
    if (from.has_gttag()) {
      set_gttag(from.gttag());
    }
    if (from.has_dettag()) {
      set_dettag(from.dettag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FzHit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FzHit::CopyFrom(const FzHit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FzHit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void FzHit::Swap(FzHit* other) {
  if (other != this) {
    std::swap(ec_, other->ec_);
    std::swap(telid_, other->telid_);
    std::swap(detid_, other->detid_);
    std::swap(feeid_, other->feeid_);
    std::swap(gttag_, other->gttag_);
    std::swap(dettag_, other->dettag_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FzHit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FzHit_descriptor_;
  metadata.reflection = FzHit_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FzFee_FzFec_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FzFee_FzFec_descriptor_;
}
bool FzFee_FzFec_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FzFee_FzFec FzFee::FEC0;
const FzFee_FzFec FzFee::FEC1;
const FzFee_FzFec FzFee::FEC2;
const FzFee_FzFec FzFee::FEC3;
const FzFee_FzFec FzFee::FEC4;
const FzFee_FzFec FzFee::FEC5;
const FzFee_FzFec FzFee::FEC6;
const FzFee_FzFec FzFee::FEC7;
const FzFee_FzFec FzFee::ADCF;
const FzFee_FzFec FzFee::UNKFEC;
const FzFee_FzFec FzFee::FzFec_MIN;
const FzFee_FzFec FzFee::FzFec_MAX;
const int FzFee::FzFec_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FzFee::kFeeidFieldNumber;
const int FzFee::kHitFieldNumber;
const int FzFee::kLenErrorFieldNumber;
const int FzFee::kCrcErrorFieldNumber;
#endif  // !_MSC_VER

FzFee::FzFee()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DAQ.FzFee)
}

void FzFee::InitAsDefaultInstance() {
}

FzFee::FzFee(const FzFee& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DAQ.FzFee)
}

void FzFee::SharedCtor() {
  _cached_size_ = 0;
  feeid_ = 0;
  len_error_ = false;
  crc_error_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FzFee::~FzFee() {
  // @@protoc_insertion_point(destructor:DAQ.FzFee)
  SharedDtor();
}

void FzFee::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FzFee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FzFee::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FzFee_descriptor_;
}

const FzFee& FzFee::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FzEventSet_2eproto();
  return *default_instance_;
}

FzFee* FzFee::default_instance_ = NULL;

FzFee* FzFee::New() const {
  return new FzFee;
}

void FzFee::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FzFee*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(feeid_, crc_error_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  hit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FzFee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DAQ.FzFee)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DAQ.FzFee.FzFec feeid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DAQ::FzFee_FzFec_IsValid(value)) {
            set_feeid(static_cast< ::DAQ::FzFee_FzFec >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hit;
        break;
      }

      // repeated .DAQ.FzHit hit = 2;
      case 2: {
        if (tag == 18) {
         parse_hit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hit;
        if (input->ExpectTag(24)) goto parse_len_error;
        break;
      }

      // required bool len_error = 3;
      case 3: {
        if (tag == 24) {
         parse_len_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &len_error_)));
          set_has_len_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crc_error;
        break;
      }

      // required bool crc_error = 4;
      case 4: {
        if (tag == 32) {
         parse_crc_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crc_error_)));
          set_has_crc_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DAQ.FzFee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DAQ.FzFee)
  return false;
#undef DO_
}

void FzFee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DAQ.FzFee)
  // required .DAQ.FzFee.FzFec feeid = 1;
  if (has_feeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->feeid(), output);
  }

  // repeated .DAQ.FzHit hit = 2;
  for (int i = 0; i < this->hit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hit(i), output);
  }

  // required bool len_error = 3;
  if (has_len_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->len_error(), output);
  }

  // required bool crc_error = 4;
  if (has_crc_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->crc_error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DAQ.FzFee)
}

::google::protobuf::uint8* FzFee::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DAQ.FzFee)
  // required .DAQ.FzFee.FzFec feeid = 1;
  if (has_feeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->feeid(), target);
  }

  // repeated .DAQ.FzHit hit = 2;
  for (int i = 0; i < this->hit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hit(i), target);
  }

  // required bool len_error = 3;
  if (has_len_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->len_error(), target);
  }

  // required bool crc_error = 4;
  if (has_crc_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->crc_error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DAQ.FzFee)
  return target;
}

int FzFee::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DAQ.FzFee.FzFec feeid = 1;
    if (has_feeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->feeid());
    }

    // required bool len_error = 3;
    if (has_len_error()) {
      total_size += 1 + 1;
    }

    // required bool crc_error = 4;
    if (has_crc_error()) {
      total_size += 1 + 1;
    }

  }
  // repeated .DAQ.FzHit hit = 2;
  total_size += 1 * this->hit_size();
  for (int i = 0; i < this->hit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hit(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FzFee::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FzFee* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FzFee*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FzFee::MergeFrom(const FzFee& from) {
  GOOGLE_CHECK_NE(&from, this);
  hit_.MergeFrom(from.hit_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_feeid()) {
      set_feeid(from.feeid());
    }
    if (from.has_len_error()) {
      set_len_error(from.len_error());
    }
    if (from.has_crc_error()) {
      set_crc_error(from.crc_error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FzFee::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FzFee::CopyFrom(const FzFee& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FzFee::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->hit())) return false;
  return true;
}

void FzFee::Swap(FzFee* other) {
  if (other != this) {
    std::swap(feeid_, other->feeid_);
    hit_.Swap(&other->hit_);
    std::swap(len_error_, other->len_error_);
    std::swap(crc_error_, other->crc_error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FzFee::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FzFee_descriptor_;
  metadata.reflection = FzFee_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FzBlock::kBlkidFieldNumber;
const int FzBlock::kFeeFieldNumber;
const int FzBlock::kLenErrorFieldNumber;
const int FzBlock::kCrcErrorFieldNumber;
#endif  // !_MSC_VER

FzBlock::FzBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DAQ.FzBlock)
}

void FzBlock::InitAsDefaultInstance() {
}

FzBlock::FzBlock(const FzBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DAQ.FzBlock)
}

void FzBlock::SharedCtor() {
  _cached_size_ = 0;
  blkid_ = 0u;
  len_error_ = false;
  crc_error_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FzBlock::~FzBlock() {
  // @@protoc_insertion_point(destructor:DAQ.FzBlock)
  SharedDtor();
}

void FzBlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FzBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FzBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FzBlock_descriptor_;
}

const FzBlock& FzBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FzEventSet_2eproto();
  return *default_instance_;
}

FzBlock* FzBlock::default_instance_ = NULL;

FzBlock* FzBlock::New() const {
  return new FzBlock;
}

void FzBlock::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FzBlock*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(blkid_, crc_error_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  fee_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FzBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DAQ.FzBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 blkid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blkid_)));
          set_has_blkid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fee;
        break;
      }

      // repeated .DAQ.FzFee fee = 2;
      case 2: {
        if (tag == 18) {
         parse_fee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fee()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fee;
        if (input->ExpectTag(24)) goto parse_len_error;
        break;
      }

      // required bool len_error = 3;
      case 3: {
        if (tag == 24) {
         parse_len_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &len_error_)));
          set_has_len_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crc_error;
        break;
      }

      // required bool crc_error = 4;
      case 4: {
        if (tag == 32) {
         parse_crc_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crc_error_)));
          set_has_crc_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DAQ.FzBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DAQ.FzBlock)
  return false;
#undef DO_
}

void FzBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DAQ.FzBlock)
  // required uint32 blkid = 1;
  if (has_blkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->blkid(), output);
  }

  // repeated .DAQ.FzFee fee = 2;
  for (int i = 0; i < this->fee_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fee(i), output);
  }

  // required bool len_error = 3;
  if (has_len_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->len_error(), output);
  }

  // required bool crc_error = 4;
  if (has_crc_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->crc_error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DAQ.FzBlock)
}

::google::protobuf::uint8* FzBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DAQ.FzBlock)
  // required uint32 blkid = 1;
  if (has_blkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->blkid(), target);
  }

  // repeated .DAQ.FzFee fee = 2;
  for (int i = 0; i < this->fee_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fee(i), target);
  }

  // required bool len_error = 3;
  if (has_len_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->len_error(), target);
  }

  // required bool crc_error = 4;
  if (has_crc_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->crc_error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DAQ.FzBlock)
  return target;
}

int FzBlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 blkid = 1;
    if (has_blkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blkid());
    }

    // required bool len_error = 3;
    if (has_len_error()) {
      total_size += 1 + 1;
    }

    // required bool crc_error = 4;
    if (has_crc_error()) {
      total_size += 1 + 1;
    }

  }
  // repeated .DAQ.FzFee fee = 2;
  total_size += 1 * this->fee_size();
  for (int i = 0; i < this->fee_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fee(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FzBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FzBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FzBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FzBlock::MergeFrom(const FzBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  fee_.MergeFrom(from.fee_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blkid()) {
      set_blkid(from.blkid());
    }
    if (from.has_len_error()) {
      set_len_error(from.len_error());
    }
    if (from.has_crc_error()) {
      set_crc_error(from.crc_error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FzBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FzBlock::CopyFrom(const FzBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FzBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->fee())) return false;
  return true;
}

void FzBlock::Swap(FzBlock* other) {
  if (other != this) {
    std::swap(blkid_, other->blkid_);
    fee_.Swap(&other->fee_);
    std::swap(len_error_, other->len_error_);
    std::swap(crc_error_, other->crc_error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FzBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FzBlock_descriptor_;
  metadata.reflection = FzBlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FzEvent::kEcFieldNumber;
const int FzEvent::kBlockFieldNumber;
const int FzEvent::kRegidFieldNumber;
#endif  // !_MSC_VER

FzEvent::FzEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DAQ.FzEvent)
}

void FzEvent::InitAsDefaultInstance() {
}

FzEvent::FzEvent(const FzEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DAQ.FzEvent)
}

void FzEvent::SharedCtor() {
  _cached_size_ = 0;
  ec_ = 0u;
  regid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FzEvent::~FzEvent() {
  // @@protoc_insertion_point(destructor:DAQ.FzEvent)
  SharedDtor();
}

void FzEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FzEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FzEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FzEvent_descriptor_;
}

const FzEvent& FzEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FzEventSet_2eproto();
  return *default_instance_;
}

FzEvent* FzEvent::default_instance_ = NULL;

FzEvent* FzEvent::New() const {
  return new FzEvent;
}

void FzEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FzEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ec_, regid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  block_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FzEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DAQ.FzEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ec = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ec_)));
          set_has_ec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_block;
        break;
      }

      // repeated .DAQ.FzBlock block = 2;
      case 2: {
        if (tag == 18) {
         parse_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_block()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_block;
        if (input->ExpectTag(24)) goto parse_regid;
        break;
      }

      // required uint32 regid = 3;
      case 3: {
        if (tag == 24) {
         parse_regid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regid_)));
          set_has_regid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DAQ.FzEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DAQ.FzEvent)
  return false;
#undef DO_
}

void FzEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DAQ.FzEvent)
  // required uint32 ec = 1;
  if (has_ec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ec(), output);
  }

  // repeated .DAQ.FzBlock block = 2;
  for (int i = 0; i < this->block_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->block(i), output);
  }

  // required uint32 regid = 3;
  if (has_regid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->regid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DAQ.FzEvent)
}

::google::protobuf::uint8* FzEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DAQ.FzEvent)
  // required uint32 ec = 1;
  if (has_ec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ec(), target);
  }

  // repeated .DAQ.FzBlock block = 2;
  for (int i = 0; i < this->block_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->block(i), target);
  }

  // required uint32 regid = 3;
  if (has_regid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->regid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DAQ.FzEvent)
  return target;
}

int FzEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ec = 1;
    if (has_ec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ec());
    }

    // required uint32 regid = 3;
    if (has_regid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regid());
    }

  }
  // repeated .DAQ.FzBlock block = 2;
  total_size += 1 * this->block_size();
  for (int i = 0; i < this->block_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->block(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FzEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FzEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FzEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FzEvent::MergeFrom(const FzEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  block_.MergeFrom(from.block_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ec()) {
      set_ec(from.ec());
    }
    if (from.has_regid()) {
      set_regid(from.regid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FzEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FzEvent::CopyFrom(const FzEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FzEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->block())) return false;
  return true;
}

void FzEvent::Swap(FzEvent* other) {
  if (other != this) {
    std::swap(ec_, other->ec_);
    block_.Swap(&other->block_);
    std::swap(regid_, other->regid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FzEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FzEvent_descriptor_;
  metadata.reflection = FzEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FzEventSet::kEvFieldNumber;
#endif  // !_MSC_VER

FzEventSet::FzEventSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DAQ.FzEventSet)
}

void FzEventSet::InitAsDefaultInstance() {
}

FzEventSet::FzEventSet(const FzEventSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DAQ.FzEventSet)
}

void FzEventSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FzEventSet::~FzEventSet() {
  // @@protoc_insertion_point(destructor:DAQ.FzEventSet)
  SharedDtor();
}

void FzEventSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FzEventSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FzEventSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FzEventSet_descriptor_;
}

const FzEventSet& FzEventSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FzEventSet_2eproto();
  return *default_instance_;
}

FzEventSet* FzEventSet::default_instance_ = NULL;

FzEventSet* FzEventSet::New() const {
  return new FzEventSet;
}

void FzEventSet::Clear() {
  ev_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FzEventSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DAQ.FzEventSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DAQ.FzEvent ev = 1;
      case 1: {
        if (tag == 10) {
         parse_ev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ev;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DAQ.FzEventSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DAQ.FzEventSet)
  return false;
#undef DO_
}

void FzEventSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DAQ.FzEventSet)
  // repeated .DAQ.FzEvent ev = 1;
  for (int i = 0; i < this->ev_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ev(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DAQ.FzEventSet)
}

::google::protobuf::uint8* FzEventSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DAQ.FzEventSet)
  // repeated .DAQ.FzEvent ev = 1;
  for (int i = 0; i < this->ev_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ev(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DAQ.FzEventSet)
  return target;
}

int FzEventSet::ByteSize() const {
  int total_size = 0;

  // repeated .DAQ.FzEvent ev = 1;
  total_size += 1 * this->ev_size();
  for (int i = 0; i < this->ev_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ev(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FzEventSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FzEventSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FzEventSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FzEventSet::MergeFrom(const FzEventSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  ev_.MergeFrom(from.ev_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FzEventSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FzEventSet::CopyFrom(const FzEventSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FzEventSet::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->ev())) return false;
  return true;
}

void FzEventSet::Swap(FzEventSet* other) {
  if (other != this) {
    ev_.Swap(&other->ev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FzEventSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FzEventSet_descriptor_;
  metadata.reflection = FzEventSet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DAQ

// @@protoc_insertion_point(global_scope)
