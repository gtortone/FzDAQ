// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FzNodeReport.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FzNodeReport.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Report {

namespace {

const ::google::protobuf::Descriptor* FzReader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FzReader_reflection_ = NULL;
const ::google::protobuf::Descriptor* FzParser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FzParser_reflection_ = NULL;
const ::google::protobuf::Descriptor* FzFSM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FzFSM_reflection_ = NULL;
const ::google::protobuf::Descriptor* FzWriter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FzWriter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FzNodeReport_2eproto() {
  protobuf_AddDesc_FzNodeReport_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FzNodeReport.proto");
  GOOGLE_CHECK(file != NULL);
  FzReader_descriptor_ = file->message_type(0);
  static const int FzReader_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzReader, in_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzReader, in_bytes_bw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzReader, out_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzReader, out_bytes_bw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzReader, in_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzReader, in_events_bw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzReader, out_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzReader, out_events_bw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzReader, consumer_ip_),
  };
  FzReader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FzReader_descriptor_,
      FzReader::default_instance_,
      FzReader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzReader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzReader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FzReader));
  FzParser_descriptor_ = file->message_type(1);
  static const int FzParser_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzParser, in_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzParser, in_bytes_bw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzParser, out_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzParser, out_bytes_bw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzParser, in_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzParser, in_events_bw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzParser, out_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzParser, out_events_bw_),
  };
  FzParser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FzParser_descriptor_,
      FzParser::default_instance_,
      FzParser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzParser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzParser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FzParser));
  FzFSM_descriptor_ = file->message_type(2);
  static const int FzFSM_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzFSM, in_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzFSM, in_bytes_bw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzFSM, out_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzFSM, out_bytes_bw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzFSM, in_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzFSM, in_events_bw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzFSM, out_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzFSM, out_events_bw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzFSM, state_invalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzFSM, events_empty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzFSM, events_good_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzFSM, events_bad_),
  };
  FzFSM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FzFSM_descriptor_,
      FzFSM::default_instance_,
      FzFSM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzFSM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzFSM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FzFSM));
  FzWriter_descriptor_ = file->message_type(3);
  static const int FzWriter_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzWriter, in_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzWriter, in_bytes_bw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzWriter, out_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzWriter, out_bytes_bw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzWriter, in_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzWriter, in_events_bw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzWriter, out_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzWriter, out_events_bw_),
  };
  FzWriter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FzWriter_descriptor_,
      FzWriter::default_instance_,
      FzWriter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzWriter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzWriter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FzWriter));
  Node_descriptor_ = file->message_type(4);
  static const int Node_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, profile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, parser_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, parser_busy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, parser_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, reader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, parser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, fsm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, writer_),
  };
  Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Node));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FzNodeReport_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FzReader_descriptor_, &FzReader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FzParser_descriptor_, &FzParser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FzFSM_descriptor_, &FzFSM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FzWriter_descriptor_, &FzWriter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Node_descriptor_, &Node::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FzNodeReport_2eproto() {
  delete FzReader::default_instance_;
  delete FzReader_reflection_;
  delete FzParser::default_instance_;
  delete FzParser_reflection_;
  delete FzFSM::default_instance_;
  delete FzFSM_reflection_;
  delete FzWriter::default_instance_;
  delete FzWriter_reflection_;
  delete Node::default_instance_;
  delete Node_reflection_;
}

void protobuf_AddDesc_FzNodeReport_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022FzNodeReport.proto\022\006Report\"\303\001\n\010FzReade"
    "r\022\020\n\010in_bytes\030\001 \002(\004\022\023\n\013in_bytes_bw\030\002 \001(\r"
    "\022\021\n\tout_bytes\030\003 \001(\004\022\024\n\014out_bytes_bw\030\004 \001("
    "\r\022\021\n\tin_events\030\005 \002(\004\022\024\n\014in_events_bw\030\006 \001"
    "(\r\022\022\n\nout_events\030\007 \001(\004\022\025\n\rout_events_bw\030"
    "\010 \001(\r\022\023\n\013consumer_ip\030\t \001(\t\"\256\001\n\010FzParser\022"
    "\020\n\010in_bytes\030\001 \002(\004\022\023\n\013in_bytes_bw\030\002 \001(\r\022\021"
    "\n\tout_bytes\030\003 \002(\004\022\024\n\014out_bytes_bw\030\004 \001(\r\022"
    "\021\n\tin_events\030\005 \002(\004\022\024\n\014in_events_bw\030\006 \001(\r"
    "\022\022\n\nout_events\030\007 \002(\004\022\025\n\rout_events_bw\030\010 "
    "\001(\r\"\201\002\n\005FzFSM\022\020\n\010in_bytes\030\001 \002(\004\022\023\n\013in_by"
    "tes_bw\030\002 \001(\r\022\021\n\tout_bytes\030\003 \002(\004\022\024\n\014out_b"
    "ytes_bw\030\004 \001(\r\022\021\n\tin_events\030\005 \002(\004\022\024\n\014in_e"
    "vents_bw\030\006 \001(\r\022\022\n\nout_events\030\007 \002(\004\022\025\n\rou"
    "t_events_bw\030\010 \001(\r\022\025\n\rstate_invalid\030\t \002(\004"
    "\022\024\n\014events_empty\030\n \002(\004\022\023\n\013events_good\030\013 "
    "\002(\004\022\022\n\nevents_bad\030\014 \002(\004\"\256\001\n\010FzWriter\022\020\n\010"
    "in_bytes\030\001 \002(\004\022\023\n\013in_bytes_bw\030\002 \001(\r\022\021\n\to"
    "ut_bytes\030\003 \002(\004\022\024\n\014out_bytes_bw\030\004 \001(\r\022\021\n\t"
    "in_events\030\005 \002(\004\022\024\n\014in_events_bw\030\006 \001(\r\022\022\n"
    "\nout_events\030\007 \002(\004\022\025\n\rout_events_bw\030\010 \001(\r"
    "\"\351\001\n\004Node\022\020\n\010hostname\030\001 \002(\t\022\017\n\007profile\030\002"
    " \002(\t\022\022\n\nparser_num\030\003 \001(\r\022\023\n\013parser_busy\030"
    "\004 \001(\r\022\023\n\013parser_free\030\005 \001(\r\022 \n\006reader\030\006 \001"
    "(\0132\020.Report.FzReader\022 \n\006parser\030\007 \003(\0132\020.R"
    "eport.FzParser\022\032\n\003fsm\030\010 \003(\0132\r.Report.FzF"
    "SM\022 \n\006writer\030\t \001(\0132\020.Report.FzWriterB\005H\001"
    "\200\001\000", 1083);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FzNodeReport.proto", &protobuf_RegisterTypes);
  FzReader::default_instance_ = new FzReader();
  FzParser::default_instance_ = new FzParser();
  FzFSM::default_instance_ = new FzFSM();
  FzWriter::default_instance_ = new FzWriter();
  Node::default_instance_ = new Node();
  FzReader::default_instance_->InitAsDefaultInstance();
  FzParser::default_instance_->InitAsDefaultInstance();
  FzFSM::default_instance_->InitAsDefaultInstance();
  FzWriter::default_instance_->InitAsDefaultInstance();
  Node::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FzNodeReport_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FzNodeReport_2eproto {
  StaticDescriptorInitializer_FzNodeReport_2eproto() {
    protobuf_AddDesc_FzNodeReport_2eproto();
  }
} static_descriptor_initializer_FzNodeReport_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FzReader::kInBytesFieldNumber;
const int FzReader::kInBytesBwFieldNumber;
const int FzReader::kOutBytesFieldNumber;
const int FzReader::kOutBytesBwFieldNumber;
const int FzReader::kInEventsFieldNumber;
const int FzReader::kInEventsBwFieldNumber;
const int FzReader::kOutEventsFieldNumber;
const int FzReader::kOutEventsBwFieldNumber;
const int FzReader::kConsumerIpFieldNumber;
#endif  // !_MSC_VER

FzReader::FzReader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FzReader::InitAsDefaultInstance() {
}

FzReader::FzReader(const FzReader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FzReader::SharedCtor() {
  _cached_size_ = 0;
  in_bytes_ = GOOGLE_ULONGLONG(0);
  in_bytes_bw_ = 0u;
  out_bytes_ = GOOGLE_ULONGLONG(0);
  out_bytes_bw_ = 0u;
  in_events_ = GOOGLE_ULONGLONG(0);
  in_events_bw_ = 0u;
  out_events_ = GOOGLE_ULONGLONG(0);
  out_events_bw_ = 0u;
  consumer_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FzReader::~FzReader() {
  SharedDtor();
}

void FzReader::SharedDtor() {
  if (consumer_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete consumer_ip_;
  }
  if (this != default_instance_) {
  }
}

void FzReader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FzReader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FzReader_descriptor_;
}

const FzReader& FzReader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FzNodeReport_2eproto();
  return *default_instance_;
}

FzReader* FzReader::default_instance_ = NULL;

FzReader* FzReader::New() const {
  return new FzReader;
}

void FzReader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    in_bytes_ = GOOGLE_ULONGLONG(0);
    in_bytes_bw_ = 0u;
    out_bytes_ = GOOGLE_ULONGLONG(0);
    out_bytes_bw_ = 0u;
    in_events_ = GOOGLE_ULONGLONG(0);
    in_events_bw_ = 0u;
    out_events_ = GOOGLE_ULONGLONG(0);
    out_events_bw_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_consumer_ip()) {
      if (consumer_ip_ != &::google::protobuf::internal::kEmptyString) {
        consumer_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FzReader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 in_bytes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &in_bytes_)));
          set_has_in_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_in_bytes_bw;
        break;
      }

      // optional uint32 in_bytes_bw = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_bytes_bw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_bytes_bw_)));
          set_has_in_bytes_bw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_out_bytes;
        break;
      }

      // optional uint64 out_bytes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &out_bytes_)));
          set_has_out_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_out_bytes_bw;
        break;
      }

      // optional uint32 out_bytes_bw = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_bytes_bw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_bytes_bw_)));
          set_has_out_bytes_bw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_in_events;
        break;
      }

      // required uint64 in_events = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_events:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &in_events_)));
          set_has_in_events();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_in_events_bw;
        break;
      }

      // optional uint32 in_events_bw = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_events_bw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_events_bw_)));
          set_has_in_events_bw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_out_events;
        break;
      }

      // optional uint64 out_events = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_events:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &out_events_)));
          set_has_out_events();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_out_events_bw;
        break;
      }

      // optional uint32 out_events_bw = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_events_bw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_events_bw_)));
          set_has_out_events_bw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_consumer_ip;
        break;
      }

      // optional string consumer_ip = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consumer_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_consumer_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->consumer_ip().data(), this->consumer_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FzReader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 in_bytes = 1;
  if (has_in_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->in_bytes(), output);
  }

  // optional uint32 in_bytes_bw = 2;
  if (has_in_bytes_bw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->in_bytes_bw(), output);
  }

  // optional uint64 out_bytes = 3;
  if (has_out_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->out_bytes(), output);
  }

  // optional uint32 out_bytes_bw = 4;
  if (has_out_bytes_bw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->out_bytes_bw(), output);
  }

  // required uint64 in_events = 5;
  if (has_in_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->in_events(), output);
  }

  // optional uint32 in_events_bw = 6;
  if (has_in_events_bw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->in_events_bw(), output);
  }

  // optional uint64 out_events = 7;
  if (has_out_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->out_events(), output);
  }

  // optional uint32 out_events_bw = 8;
  if (has_out_events_bw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->out_events_bw(), output);
  }

  // optional string consumer_ip = 9;
  if (has_consumer_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->consumer_ip().data(), this->consumer_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->consumer_ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FzReader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 in_bytes = 1;
  if (has_in_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->in_bytes(), target);
  }

  // optional uint32 in_bytes_bw = 2;
  if (has_in_bytes_bw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->in_bytes_bw(), target);
  }

  // optional uint64 out_bytes = 3;
  if (has_out_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->out_bytes(), target);
  }

  // optional uint32 out_bytes_bw = 4;
  if (has_out_bytes_bw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->out_bytes_bw(), target);
  }

  // required uint64 in_events = 5;
  if (has_in_events()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->in_events(), target);
  }

  // optional uint32 in_events_bw = 6;
  if (has_in_events_bw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->in_events_bw(), target);
  }

  // optional uint64 out_events = 7;
  if (has_out_events()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->out_events(), target);
  }

  // optional uint32 out_events_bw = 8;
  if (has_out_events_bw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->out_events_bw(), target);
  }

  // optional string consumer_ip = 9;
  if (has_consumer_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->consumer_ip().data(), this->consumer_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->consumer_ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FzReader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 in_bytes = 1;
    if (has_in_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->in_bytes());
    }

    // optional uint32 in_bytes_bw = 2;
    if (has_in_bytes_bw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_bytes_bw());
    }

    // optional uint64 out_bytes = 3;
    if (has_out_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->out_bytes());
    }

    // optional uint32 out_bytes_bw = 4;
    if (has_out_bytes_bw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_bytes_bw());
    }

    // required uint64 in_events = 5;
    if (has_in_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->in_events());
    }

    // optional uint32 in_events_bw = 6;
    if (has_in_events_bw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_events_bw());
    }

    // optional uint64 out_events = 7;
    if (has_out_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->out_events());
    }

    // optional uint32 out_events_bw = 8;
    if (has_out_events_bw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_events_bw());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string consumer_ip = 9;
    if (has_consumer_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->consumer_ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FzReader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FzReader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FzReader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FzReader::MergeFrom(const FzReader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_in_bytes()) {
      set_in_bytes(from.in_bytes());
    }
    if (from.has_in_bytes_bw()) {
      set_in_bytes_bw(from.in_bytes_bw());
    }
    if (from.has_out_bytes()) {
      set_out_bytes(from.out_bytes());
    }
    if (from.has_out_bytes_bw()) {
      set_out_bytes_bw(from.out_bytes_bw());
    }
    if (from.has_in_events()) {
      set_in_events(from.in_events());
    }
    if (from.has_in_events_bw()) {
      set_in_events_bw(from.in_events_bw());
    }
    if (from.has_out_events()) {
      set_out_events(from.out_events());
    }
    if (from.has_out_events_bw()) {
      set_out_events_bw(from.out_events_bw());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_consumer_ip()) {
      set_consumer_ip(from.consumer_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FzReader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FzReader::CopyFrom(const FzReader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FzReader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;

  return true;
}

void FzReader::Swap(FzReader* other) {
  if (other != this) {
    std::swap(in_bytes_, other->in_bytes_);
    std::swap(in_bytes_bw_, other->in_bytes_bw_);
    std::swap(out_bytes_, other->out_bytes_);
    std::swap(out_bytes_bw_, other->out_bytes_bw_);
    std::swap(in_events_, other->in_events_);
    std::swap(in_events_bw_, other->in_events_bw_);
    std::swap(out_events_, other->out_events_);
    std::swap(out_events_bw_, other->out_events_bw_);
    std::swap(consumer_ip_, other->consumer_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FzReader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FzReader_descriptor_;
  metadata.reflection = FzReader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FzParser::kInBytesFieldNumber;
const int FzParser::kInBytesBwFieldNumber;
const int FzParser::kOutBytesFieldNumber;
const int FzParser::kOutBytesBwFieldNumber;
const int FzParser::kInEventsFieldNumber;
const int FzParser::kInEventsBwFieldNumber;
const int FzParser::kOutEventsFieldNumber;
const int FzParser::kOutEventsBwFieldNumber;
#endif  // !_MSC_VER

FzParser::FzParser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FzParser::InitAsDefaultInstance() {
}

FzParser::FzParser(const FzParser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FzParser::SharedCtor() {
  _cached_size_ = 0;
  in_bytes_ = GOOGLE_ULONGLONG(0);
  in_bytes_bw_ = 0u;
  out_bytes_ = GOOGLE_ULONGLONG(0);
  out_bytes_bw_ = 0u;
  in_events_ = GOOGLE_ULONGLONG(0);
  in_events_bw_ = 0u;
  out_events_ = GOOGLE_ULONGLONG(0);
  out_events_bw_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FzParser::~FzParser() {
  SharedDtor();
}

void FzParser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FzParser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FzParser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FzParser_descriptor_;
}

const FzParser& FzParser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FzNodeReport_2eproto();
  return *default_instance_;
}

FzParser* FzParser::default_instance_ = NULL;

FzParser* FzParser::New() const {
  return new FzParser;
}

void FzParser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    in_bytes_ = GOOGLE_ULONGLONG(0);
    in_bytes_bw_ = 0u;
    out_bytes_ = GOOGLE_ULONGLONG(0);
    out_bytes_bw_ = 0u;
    in_events_ = GOOGLE_ULONGLONG(0);
    in_events_bw_ = 0u;
    out_events_ = GOOGLE_ULONGLONG(0);
    out_events_bw_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FzParser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 in_bytes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &in_bytes_)));
          set_has_in_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_in_bytes_bw;
        break;
      }

      // optional uint32 in_bytes_bw = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_bytes_bw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_bytes_bw_)));
          set_has_in_bytes_bw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_out_bytes;
        break;
      }

      // required uint64 out_bytes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &out_bytes_)));
          set_has_out_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_out_bytes_bw;
        break;
      }

      // optional uint32 out_bytes_bw = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_bytes_bw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_bytes_bw_)));
          set_has_out_bytes_bw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_in_events;
        break;
      }

      // required uint64 in_events = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_events:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &in_events_)));
          set_has_in_events();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_in_events_bw;
        break;
      }

      // optional uint32 in_events_bw = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_events_bw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_events_bw_)));
          set_has_in_events_bw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_out_events;
        break;
      }

      // required uint64 out_events = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_events:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &out_events_)));
          set_has_out_events();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_out_events_bw;
        break;
      }

      // optional uint32 out_events_bw = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_events_bw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_events_bw_)));
          set_has_out_events_bw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FzParser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 in_bytes = 1;
  if (has_in_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->in_bytes(), output);
  }

  // optional uint32 in_bytes_bw = 2;
  if (has_in_bytes_bw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->in_bytes_bw(), output);
  }

  // required uint64 out_bytes = 3;
  if (has_out_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->out_bytes(), output);
  }

  // optional uint32 out_bytes_bw = 4;
  if (has_out_bytes_bw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->out_bytes_bw(), output);
  }

  // required uint64 in_events = 5;
  if (has_in_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->in_events(), output);
  }

  // optional uint32 in_events_bw = 6;
  if (has_in_events_bw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->in_events_bw(), output);
  }

  // required uint64 out_events = 7;
  if (has_out_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->out_events(), output);
  }

  // optional uint32 out_events_bw = 8;
  if (has_out_events_bw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->out_events_bw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FzParser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 in_bytes = 1;
  if (has_in_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->in_bytes(), target);
  }

  // optional uint32 in_bytes_bw = 2;
  if (has_in_bytes_bw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->in_bytes_bw(), target);
  }

  // required uint64 out_bytes = 3;
  if (has_out_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->out_bytes(), target);
  }

  // optional uint32 out_bytes_bw = 4;
  if (has_out_bytes_bw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->out_bytes_bw(), target);
  }

  // required uint64 in_events = 5;
  if (has_in_events()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->in_events(), target);
  }

  // optional uint32 in_events_bw = 6;
  if (has_in_events_bw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->in_events_bw(), target);
  }

  // required uint64 out_events = 7;
  if (has_out_events()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->out_events(), target);
  }

  // optional uint32 out_events_bw = 8;
  if (has_out_events_bw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->out_events_bw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FzParser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 in_bytes = 1;
    if (has_in_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->in_bytes());
    }

    // optional uint32 in_bytes_bw = 2;
    if (has_in_bytes_bw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_bytes_bw());
    }

    // required uint64 out_bytes = 3;
    if (has_out_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->out_bytes());
    }

    // optional uint32 out_bytes_bw = 4;
    if (has_out_bytes_bw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_bytes_bw());
    }

    // required uint64 in_events = 5;
    if (has_in_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->in_events());
    }

    // optional uint32 in_events_bw = 6;
    if (has_in_events_bw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_events_bw());
    }

    // required uint64 out_events = 7;
    if (has_out_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->out_events());
    }

    // optional uint32 out_events_bw = 8;
    if (has_out_events_bw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_events_bw());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FzParser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FzParser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FzParser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FzParser::MergeFrom(const FzParser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_in_bytes()) {
      set_in_bytes(from.in_bytes());
    }
    if (from.has_in_bytes_bw()) {
      set_in_bytes_bw(from.in_bytes_bw());
    }
    if (from.has_out_bytes()) {
      set_out_bytes(from.out_bytes());
    }
    if (from.has_out_bytes_bw()) {
      set_out_bytes_bw(from.out_bytes_bw());
    }
    if (from.has_in_events()) {
      set_in_events(from.in_events());
    }
    if (from.has_in_events_bw()) {
      set_in_events_bw(from.in_events_bw());
    }
    if (from.has_out_events()) {
      set_out_events(from.out_events());
    }
    if (from.has_out_events_bw()) {
      set_out_events_bw(from.out_events_bw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FzParser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FzParser::CopyFrom(const FzParser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FzParser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000055) != 0x00000055) return false;

  return true;
}

void FzParser::Swap(FzParser* other) {
  if (other != this) {
    std::swap(in_bytes_, other->in_bytes_);
    std::swap(in_bytes_bw_, other->in_bytes_bw_);
    std::swap(out_bytes_, other->out_bytes_);
    std::swap(out_bytes_bw_, other->out_bytes_bw_);
    std::swap(in_events_, other->in_events_);
    std::swap(in_events_bw_, other->in_events_bw_);
    std::swap(out_events_, other->out_events_);
    std::swap(out_events_bw_, other->out_events_bw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FzParser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FzParser_descriptor_;
  metadata.reflection = FzParser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FzFSM::kInBytesFieldNumber;
const int FzFSM::kInBytesBwFieldNumber;
const int FzFSM::kOutBytesFieldNumber;
const int FzFSM::kOutBytesBwFieldNumber;
const int FzFSM::kInEventsFieldNumber;
const int FzFSM::kInEventsBwFieldNumber;
const int FzFSM::kOutEventsFieldNumber;
const int FzFSM::kOutEventsBwFieldNumber;
const int FzFSM::kStateInvalidFieldNumber;
const int FzFSM::kEventsEmptyFieldNumber;
const int FzFSM::kEventsGoodFieldNumber;
const int FzFSM::kEventsBadFieldNumber;
#endif  // !_MSC_VER

FzFSM::FzFSM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FzFSM::InitAsDefaultInstance() {
}

FzFSM::FzFSM(const FzFSM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FzFSM::SharedCtor() {
  _cached_size_ = 0;
  in_bytes_ = GOOGLE_ULONGLONG(0);
  in_bytes_bw_ = 0u;
  out_bytes_ = GOOGLE_ULONGLONG(0);
  out_bytes_bw_ = 0u;
  in_events_ = GOOGLE_ULONGLONG(0);
  in_events_bw_ = 0u;
  out_events_ = GOOGLE_ULONGLONG(0);
  out_events_bw_ = 0u;
  state_invalid_ = GOOGLE_ULONGLONG(0);
  events_empty_ = GOOGLE_ULONGLONG(0);
  events_good_ = GOOGLE_ULONGLONG(0);
  events_bad_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FzFSM::~FzFSM() {
  SharedDtor();
}

void FzFSM::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FzFSM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FzFSM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FzFSM_descriptor_;
}

const FzFSM& FzFSM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FzNodeReport_2eproto();
  return *default_instance_;
}

FzFSM* FzFSM::default_instance_ = NULL;

FzFSM* FzFSM::New() const {
  return new FzFSM;
}

void FzFSM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    in_bytes_ = GOOGLE_ULONGLONG(0);
    in_bytes_bw_ = 0u;
    out_bytes_ = GOOGLE_ULONGLONG(0);
    out_bytes_bw_ = 0u;
    in_events_ = GOOGLE_ULONGLONG(0);
    in_events_bw_ = 0u;
    out_events_ = GOOGLE_ULONGLONG(0);
    out_events_bw_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    state_invalid_ = GOOGLE_ULONGLONG(0);
    events_empty_ = GOOGLE_ULONGLONG(0);
    events_good_ = GOOGLE_ULONGLONG(0);
    events_bad_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FzFSM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 in_bytes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &in_bytes_)));
          set_has_in_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_in_bytes_bw;
        break;
      }

      // optional uint32 in_bytes_bw = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_bytes_bw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_bytes_bw_)));
          set_has_in_bytes_bw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_out_bytes;
        break;
      }

      // required uint64 out_bytes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &out_bytes_)));
          set_has_out_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_out_bytes_bw;
        break;
      }

      // optional uint32 out_bytes_bw = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_bytes_bw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_bytes_bw_)));
          set_has_out_bytes_bw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_in_events;
        break;
      }

      // required uint64 in_events = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_events:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &in_events_)));
          set_has_in_events();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_in_events_bw;
        break;
      }

      // optional uint32 in_events_bw = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_events_bw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_events_bw_)));
          set_has_in_events_bw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_out_events;
        break;
      }

      // required uint64 out_events = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_events:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &out_events_)));
          set_has_out_events();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_out_events_bw;
        break;
      }

      // optional uint32 out_events_bw = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_events_bw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_events_bw_)));
          set_has_out_events_bw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_state_invalid;
        break;
      }

      // required uint64 state_invalid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state_invalid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &state_invalid_)));
          set_has_state_invalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_events_empty;
        break;
      }

      // required uint64 events_empty = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_events_empty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &events_empty_)));
          set_has_events_empty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_events_good;
        break;
      }

      // required uint64 events_good = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_events_good:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &events_good_)));
          set_has_events_good();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_events_bad;
        break;
      }

      // required uint64 events_bad = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_events_bad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &events_bad_)));
          set_has_events_bad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FzFSM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 in_bytes = 1;
  if (has_in_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->in_bytes(), output);
  }

  // optional uint32 in_bytes_bw = 2;
  if (has_in_bytes_bw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->in_bytes_bw(), output);
  }

  // required uint64 out_bytes = 3;
  if (has_out_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->out_bytes(), output);
  }

  // optional uint32 out_bytes_bw = 4;
  if (has_out_bytes_bw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->out_bytes_bw(), output);
  }

  // required uint64 in_events = 5;
  if (has_in_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->in_events(), output);
  }

  // optional uint32 in_events_bw = 6;
  if (has_in_events_bw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->in_events_bw(), output);
  }

  // required uint64 out_events = 7;
  if (has_out_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->out_events(), output);
  }

  // optional uint32 out_events_bw = 8;
  if (has_out_events_bw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->out_events_bw(), output);
  }

  // required uint64 state_invalid = 9;
  if (has_state_invalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->state_invalid(), output);
  }

  // required uint64 events_empty = 10;
  if (has_events_empty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->events_empty(), output);
  }

  // required uint64 events_good = 11;
  if (has_events_good()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->events_good(), output);
  }

  // required uint64 events_bad = 12;
  if (has_events_bad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->events_bad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FzFSM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 in_bytes = 1;
  if (has_in_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->in_bytes(), target);
  }

  // optional uint32 in_bytes_bw = 2;
  if (has_in_bytes_bw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->in_bytes_bw(), target);
  }

  // required uint64 out_bytes = 3;
  if (has_out_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->out_bytes(), target);
  }

  // optional uint32 out_bytes_bw = 4;
  if (has_out_bytes_bw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->out_bytes_bw(), target);
  }

  // required uint64 in_events = 5;
  if (has_in_events()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->in_events(), target);
  }

  // optional uint32 in_events_bw = 6;
  if (has_in_events_bw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->in_events_bw(), target);
  }

  // required uint64 out_events = 7;
  if (has_out_events()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->out_events(), target);
  }

  // optional uint32 out_events_bw = 8;
  if (has_out_events_bw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->out_events_bw(), target);
  }

  // required uint64 state_invalid = 9;
  if (has_state_invalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->state_invalid(), target);
  }

  // required uint64 events_empty = 10;
  if (has_events_empty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->events_empty(), target);
  }

  // required uint64 events_good = 11;
  if (has_events_good()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->events_good(), target);
  }

  // required uint64 events_bad = 12;
  if (has_events_bad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->events_bad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FzFSM::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 in_bytes = 1;
    if (has_in_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->in_bytes());
    }

    // optional uint32 in_bytes_bw = 2;
    if (has_in_bytes_bw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_bytes_bw());
    }

    // required uint64 out_bytes = 3;
    if (has_out_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->out_bytes());
    }

    // optional uint32 out_bytes_bw = 4;
    if (has_out_bytes_bw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_bytes_bw());
    }

    // required uint64 in_events = 5;
    if (has_in_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->in_events());
    }

    // optional uint32 in_events_bw = 6;
    if (has_in_events_bw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_events_bw());
    }

    // required uint64 out_events = 7;
    if (has_out_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->out_events());
    }

    // optional uint32 out_events_bw = 8;
    if (has_out_events_bw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_events_bw());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 state_invalid = 9;
    if (has_state_invalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->state_invalid());
    }

    // required uint64 events_empty = 10;
    if (has_events_empty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->events_empty());
    }

    // required uint64 events_good = 11;
    if (has_events_good()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->events_good());
    }

    // required uint64 events_bad = 12;
    if (has_events_bad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->events_bad());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FzFSM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FzFSM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FzFSM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FzFSM::MergeFrom(const FzFSM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_in_bytes()) {
      set_in_bytes(from.in_bytes());
    }
    if (from.has_in_bytes_bw()) {
      set_in_bytes_bw(from.in_bytes_bw());
    }
    if (from.has_out_bytes()) {
      set_out_bytes(from.out_bytes());
    }
    if (from.has_out_bytes_bw()) {
      set_out_bytes_bw(from.out_bytes_bw());
    }
    if (from.has_in_events()) {
      set_in_events(from.in_events());
    }
    if (from.has_in_events_bw()) {
      set_in_events_bw(from.in_events_bw());
    }
    if (from.has_out_events()) {
      set_out_events(from.out_events());
    }
    if (from.has_out_events_bw()) {
      set_out_events_bw(from.out_events_bw());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_state_invalid()) {
      set_state_invalid(from.state_invalid());
    }
    if (from.has_events_empty()) {
      set_events_empty(from.events_empty());
    }
    if (from.has_events_good()) {
      set_events_good(from.events_good());
    }
    if (from.has_events_bad()) {
      set_events_bad(from.events_bad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FzFSM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FzFSM::CopyFrom(const FzFSM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FzFSM::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000f55) != 0x00000f55) return false;

  return true;
}

void FzFSM::Swap(FzFSM* other) {
  if (other != this) {
    std::swap(in_bytes_, other->in_bytes_);
    std::swap(in_bytes_bw_, other->in_bytes_bw_);
    std::swap(out_bytes_, other->out_bytes_);
    std::swap(out_bytes_bw_, other->out_bytes_bw_);
    std::swap(in_events_, other->in_events_);
    std::swap(in_events_bw_, other->in_events_bw_);
    std::swap(out_events_, other->out_events_);
    std::swap(out_events_bw_, other->out_events_bw_);
    std::swap(state_invalid_, other->state_invalid_);
    std::swap(events_empty_, other->events_empty_);
    std::swap(events_good_, other->events_good_);
    std::swap(events_bad_, other->events_bad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FzFSM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FzFSM_descriptor_;
  metadata.reflection = FzFSM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FzWriter::kInBytesFieldNumber;
const int FzWriter::kInBytesBwFieldNumber;
const int FzWriter::kOutBytesFieldNumber;
const int FzWriter::kOutBytesBwFieldNumber;
const int FzWriter::kInEventsFieldNumber;
const int FzWriter::kInEventsBwFieldNumber;
const int FzWriter::kOutEventsFieldNumber;
const int FzWriter::kOutEventsBwFieldNumber;
#endif  // !_MSC_VER

FzWriter::FzWriter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FzWriter::InitAsDefaultInstance() {
}

FzWriter::FzWriter(const FzWriter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FzWriter::SharedCtor() {
  _cached_size_ = 0;
  in_bytes_ = GOOGLE_ULONGLONG(0);
  in_bytes_bw_ = 0u;
  out_bytes_ = GOOGLE_ULONGLONG(0);
  out_bytes_bw_ = 0u;
  in_events_ = GOOGLE_ULONGLONG(0);
  in_events_bw_ = 0u;
  out_events_ = GOOGLE_ULONGLONG(0);
  out_events_bw_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FzWriter::~FzWriter() {
  SharedDtor();
}

void FzWriter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FzWriter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FzWriter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FzWriter_descriptor_;
}

const FzWriter& FzWriter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FzNodeReport_2eproto();
  return *default_instance_;
}

FzWriter* FzWriter::default_instance_ = NULL;

FzWriter* FzWriter::New() const {
  return new FzWriter;
}

void FzWriter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    in_bytes_ = GOOGLE_ULONGLONG(0);
    in_bytes_bw_ = 0u;
    out_bytes_ = GOOGLE_ULONGLONG(0);
    out_bytes_bw_ = 0u;
    in_events_ = GOOGLE_ULONGLONG(0);
    in_events_bw_ = 0u;
    out_events_ = GOOGLE_ULONGLONG(0);
    out_events_bw_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FzWriter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 in_bytes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &in_bytes_)));
          set_has_in_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_in_bytes_bw;
        break;
      }

      // optional uint32 in_bytes_bw = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_bytes_bw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_bytes_bw_)));
          set_has_in_bytes_bw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_out_bytes;
        break;
      }

      // required uint64 out_bytes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &out_bytes_)));
          set_has_out_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_out_bytes_bw;
        break;
      }

      // optional uint32 out_bytes_bw = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_bytes_bw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_bytes_bw_)));
          set_has_out_bytes_bw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_in_events;
        break;
      }

      // required uint64 in_events = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_events:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &in_events_)));
          set_has_in_events();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_in_events_bw;
        break;
      }

      // optional uint32 in_events_bw = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_events_bw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_events_bw_)));
          set_has_in_events_bw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_out_events;
        break;
      }

      // required uint64 out_events = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_events:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &out_events_)));
          set_has_out_events();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_out_events_bw;
        break;
      }

      // optional uint32 out_events_bw = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_events_bw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_events_bw_)));
          set_has_out_events_bw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FzWriter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 in_bytes = 1;
  if (has_in_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->in_bytes(), output);
  }

  // optional uint32 in_bytes_bw = 2;
  if (has_in_bytes_bw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->in_bytes_bw(), output);
  }

  // required uint64 out_bytes = 3;
  if (has_out_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->out_bytes(), output);
  }

  // optional uint32 out_bytes_bw = 4;
  if (has_out_bytes_bw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->out_bytes_bw(), output);
  }

  // required uint64 in_events = 5;
  if (has_in_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->in_events(), output);
  }

  // optional uint32 in_events_bw = 6;
  if (has_in_events_bw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->in_events_bw(), output);
  }

  // required uint64 out_events = 7;
  if (has_out_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->out_events(), output);
  }

  // optional uint32 out_events_bw = 8;
  if (has_out_events_bw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->out_events_bw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FzWriter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 in_bytes = 1;
  if (has_in_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->in_bytes(), target);
  }

  // optional uint32 in_bytes_bw = 2;
  if (has_in_bytes_bw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->in_bytes_bw(), target);
  }

  // required uint64 out_bytes = 3;
  if (has_out_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->out_bytes(), target);
  }

  // optional uint32 out_bytes_bw = 4;
  if (has_out_bytes_bw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->out_bytes_bw(), target);
  }

  // required uint64 in_events = 5;
  if (has_in_events()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->in_events(), target);
  }

  // optional uint32 in_events_bw = 6;
  if (has_in_events_bw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->in_events_bw(), target);
  }

  // required uint64 out_events = 7;
  if (has_out_events()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->out_events(), target);
  }

  // optional uint32 out_events_bw = 8;
  if (has_out_events_bw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->out_events_bw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FzWriter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 in_bytes = 1;
    if (has_in_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->in_bytes());
    }

    // optional uint32 in_bytes_bw = 2;
    if (has_in_bytes_bw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_bytes_bw());
    }

    // required uint64 out_bytes = 3;
    if (has_out_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->out_bytes());
    }

    // optional uint32 out_bytes_bw = 4;
    if (has_out_bytes_bw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_bytes_bw());
    }

    // required uint64 in_events = 5;
    if (has_in_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->in_events());
    }

    // optional uint32 in_events_bw = 6;
    if (has_in_events_bw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_events_bw());
    }

    // required uint64 out_events = 7;
    if (has_out_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->out_events());
    }

    // optional uint32 out_events_bw = 8;
    if (has_out_events_bw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_events_bw());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FzWriter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FzWriter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FzWriter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FzWriter::MergeFrom(const FzWriter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_in_bytes()) {
      set_in_bytes(from.in_bytes());
    }
    if (from.has_in_bytes_bw()) {
      set_in_bytes_bw(from.in_bytes_bw());
    }
    if (from.has_out_bytes()) {
      set_out_bytes(from.out_bytes());
    }
    if (from.has_out_bytes_bw()) {
      set_out_bytes_bw(from.out_bytes_bw());
    }
    if (from.has_in_events()) {
      set_in_events(from.in_events());
    }
    if (from.has_in_events_bw()) {
      set_in_events_bw(from.in_events_bw());
    }
    if (from.has_out_events()) {
      set_out_events(from.out_events());
    }
    if (from.has_out_events_bw()) {
      set_out_events_bw(from.out_events_bw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FzWriter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FzWriter::CopyFrom(const FzWriter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FzWriter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000055) != 0x00000055) return false;

  return true;
}

void FzWriter::Swap(FzWriter* other) {
  if (other != this) {
    std::swap(in_bytes_, other->in_bytes_);
    std::swap(in_bytes_bw_, other->in_bytes_bw_);
    std::swap(out_bytes_, other->out_bytes_);
    std::swap(out_bytes_bw_, other->out_bytes_bw_);
    std::swap(in_events_, other->in_events_);
    std::swap(in_events_bw_, other->in_events_bw_);
    std::swap(out_events_, other->out_events_);
    std::swap(out_events_bw_, other->out_events_bw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FzWriter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FzWriter_descriptor_;
  metadata.reflection = FzWriter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Node::kHostnameFieldNumber;
const int Node::kProfileFieldNumber;
const int Node::kParserNumFieldNumber;
const int Node::kParserBusyFieldNumber;
const int Node::kParserFreeFieldNumber;
const int Node::kReaderFieldNumber;
const int Node::kParserFieldNumber;
const int Node::kFsmFieldNumber;
const int Node::kWriterFieldNumber;
#endif  // !_MSC_VER

Node::Node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Node::InitAsDefaultInstance() {
  reader_ = const_cast< ::Report::FzReader*>(&::Report::FzReader::default_instance());
  writer_ = const_cast< ::Report::FzWriter*>(&::Report::FzWriter::default_instance());
}

Node::Node(const Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Node::SharedCtor() {
  _cached_size_ = 0;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  profile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parser_num_ = 0u;
  parser_busy_ = 0u;
  parser_free_ = 0u;
  reader_ = NULL;
  writer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Node::~Node() {
  SharedDtor();
}

void Node::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (profile_ != &::google::protobuf::internal::kEmptyString) {
    delete profile_;
  }
  if (this != default_instance_) {
    delete reader_;
    delete writer_;
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FzNodeReport_2eproto();
  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New() const {
  return new Node;
}

void Node::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_profile()) {
      if (profile_ != &::google::protobuf::internal::kEmptyString) {
        profile_->clear();
      }
    }
    parser_num_ = 0u;
    parser_busy_ = 0u;
    parser_free_ = 0u;
    if (has_reader()) {
      if (reader_ != NULL) reader_->::Report::FzReader::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_writer()) {
      if (writer_ != NULL) writer_->::Report::FzWriter::Clear();
    }
  }
  parser_.Clear();
  fsm_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hostname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_profile;
        break;
      }

      // required string profile = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->profile().data(), this->profile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_parser_num;
        break;
      }

      // optional uint32 parser_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parser_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parser_num_)));
          set_has_parser_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_parser_busy;
        break;
      }

      // optional uint32 parser_busy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parser_busy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parser_busy_)));
          set_has_parser_busy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_parser_free;
        break;
      }

      // optional uint32 parser_free = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parser_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parser_free_)));
          set_has_parser_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_reader;
        break;
      }

      // optional .Report.FzReader reader = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_parser;
        break;
      }

      // repeated .Report.FzParser parser = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_parser;
        if (input->ExpectTag(66)) goto parse_fsm;
        break;
      }

      // repeated .Report.FzFSM fsm = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fsm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fsm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fsm;
        if (input->ExpectTag(74)) goto parse_writer;
        break;
      }

      // optional .Report.FzWriter writer = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_writer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_writer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hostname(), output);
  }

  // required string profile = 2;
  if (has_profile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profile().data(), this->profile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->profile(), output);
  }

  // optional uint32 parser_num = 3;
  if (has_parser_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->parser_num(), output);
  }

  // optional uint32 parser_busy = 4;
  if (has_parser_busy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->parser_busy(), output);
  }

  // optional uint32 parser_free = 5;
  if (has_parser_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->parser_free(), output);
  }

  // optional .Report.FzReader reader = 6;
  if (has_reader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->reader(), output);
  }

  // repeated .Report.FzParser parser = 7;
  for (int i = 0; i < this->parser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->parser(i), output);
  }

  // repeated .Report.FzFSM fsm = 8;
  for (int i = 0; i < this->fsm_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->fsm(i), output);
  }

  // optional .Report.FzWriter writer = 9;
  if (has_writer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->writer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // required string profile = 2;
  if (has_profile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profile().data(), this->profile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->profile(), target);
  }

  // optional uint32 parser_num = 3;
  if (has_parser_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->parser_num(), target);
  }

  // optional uint32 parser_busy = 4;
  if (has_parser_busy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->parser_busy(), target);
  }

  // optional uint32 parser_free = 5;
  if (has_parser_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->parser_free(), target);
  }

  // optional .Report.FzReader reader = 6;
  if (has_reader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->reader(), target);
  }

  // repeated .Report.FzParser parser = 7;
  for (int i = 0; i < this->parser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->parser(i), target);
  }

  // repeated .Report.FzFSM fsm = 8;
  for (int i = 0; i < this->fsm_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fsm(i), target);
  }

  // optional .Report.FzWriter writer = 9;
  if (has_writer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->writer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Node::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string hostname = 1;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // required string profile = 2;
    if (has_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->profile());
    }

    // optional uint32 parser_num = 3;
    if (has_parser_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parser_num());
    }

    // optional uint32 parser_busy = 4;
    if (has_parser_busy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parser_busy());
    }

    // optional uint32 parser_free = 5;
    if (has_parser_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parser_free());
    }

    // optional .Report.FzReader reader = 6;
    if (has_reader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reader());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Report.FzWriter writer = 9;
    if (has_writer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->writer());
    }

  }
  // repeated .Report.FzParser parser = 7;
  total_size += 1 * this->parser_size();
  for (int i = 0; i < this->parser_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parser(i));
  }

  // repeated .Report.FzFSM fsm = 8;
  total_size += 1 * this->fsm_size();
  for (int i = 0; i < this->fsm_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fsm(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  parser_.MergeFrom(from.parser_);
  fsm_.MergeFrom(from.fsm_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_profile()) {
      set_profile(from.profile());
    }
    if (from.has_parser_num()) {
      set_parser_num(from.parser_num());
    }
    if (from.has_parser_busy()) {
      set_parser_busy(from.parser_busy());
    }
    if (from.has_parser_free()) {
      set_parser_free(from.parser_free());
    }
    if (from.has_reader()) {
      mutable_reader()->::Report::FzReader::MergeFrom(from.reader());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_writer()) {
      mutable_writer()->::Report::FzWriter::MergeFrom(from.writer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reader()) {
    if (!this->reader().IsInitialized()) return false;
  }
  for (int i = 0; i < parser_size(); i++) {
    if (!this->parser(i).IsInitialized()) return false;
  }
  for (int i = 0; i < fsm_size(); i++) {
    if (!this->fsm(i).IsInitialized()) return false;
  }
  if (has_writer()) {
    if (!this->writer().IsInitialized()) return false;
  }
  return true;
}

void Node::Swap(Node* other) {
  if (other != this) {
    std::swap(hostname_, other->hostname_);
    std::swap(profile_, other->profile_);
    std::swap(parser_num_, other->parser_num_);
    std::swap(parser_busy_, other->parser_busy_);
    std::swap(parser_free_, other->parser_free_);
    std::swap(reader_, other->reader_);
    parser_.Swap(&other->parser_);
    fsm_.Swap(&other->fsm_);
    std::swap(writer_, other->writer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Report

// @@protoc_insertion_point(global_scope)
