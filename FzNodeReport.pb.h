// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FzNodeReport.proto

#ifndef PROTOBUF_FzNodeReport_2eproto__INCLUDED
#define PROTOBUF_FzNodeReport_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Report {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FzNodeReport_2eproto();
void protobuf_AssignDesc_FzNodeReport_2eproto();
void protobuf_ShutdownFile_FzNodeReport_2eproto();

class FzReader;
class FzParser;
class FzFSM;
class FzWriter;
class Node;

// ===================================================================

class FzReader : public ::google::protobuf::Message {
 public:
  FzReader();
  virtual ~FzReader();

  FzReader(const FzReader& from);

  inline FzReader& operator=(const FzReader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FzReader& default_instance();

  void Swap(FzReader* other);

  // implements Message ----------------------------------------------

  FzReader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FzReader& from);
  void MergeFrom(const FzReader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 in_bytes = 1;
  inline bool has_in_bytes() const;
  inline void clear_in_bytes();
  static const int kInBytesFieldNumber = 1;
  inline ::google::protobuf::uint64 in_bytes() const;
  inline void set_in_bytes(::google::protobuf::uint64 value);

  // optional uint32 in_bytes_bw = 2;
  inline bool has_in_bytes_bw() const;
  inline void clear_in_bytes_bw();
  static const int kInBytesBwFieldNumber = 2;
  inline ::google::protobuf::uint32 in_bytes_bw() const;
  inline void set_in_bytes_bw(::google::protobuf::uint32 value);

  // optional uint64 out_bytes = 3;
  inline bool has_out_bytes() const;
  inline void clear_out_bytes();
  static const int kOutBytesFieldNumber = 3;
  inline ::google::protobuf::uint64 out_bytes() const;
  inline void set_out_bytes(::google::protobuf::uint64 value);

  // optional uint32 out_bytes_bw = 4;
  inline bool has_out_bytes_bw() const;
  inline void clear_out_bytes_bw();
  static const int kOutBytesBwFieldNumber = 4;
  inline ::google::protobuf::uint32 out_bytes_bw() const;
  inline void set_out_bytes_bw(::google::protobuf::uint32 value);

  // required uint64 in_events = 5;
  inline bool has_in_events() const;
  inline void clear_in_events();
  static const int kInEventsFieldNumber = 5;
  inline ::google::protobuf::uint64 in_events() const;
  inline void set_in_events(::google::protobuf::uint64 value);

  // optional uint32 in_events_bw = 6;
  inline bool has_in_events_bw() const;
  inline void clear_in_events_bw();
  static const int kInEventsBwFieldNumber = 6;
  inline ::google::protobuf::uint32 in_events_bw() const;
  inline void set_in_events_bw(::google::protobuf::uint32 value);

  // optional uint64 out_events = 7;
  inline bool has_out_events() const;
  inline void clear_out_events();
  static const int kOutEventsFieldNumber = 7;
  inline ::google::protobuf::uint64 out_events() const;
  inline void set_out_events(::google::protobuf::uint64 value);

  // optional uint32 out_events_bw = 8;
  inline bool has_out_events_bw() const;
  inline void clear_out_events_bw();
  static const int kOutEventsBwFieldNumber = 8;
  inline ::google::protobuf::uint32 out_events_bw() const;
  inline void set_out_events_bw(::google::protobuf::uint32 value);

  // optional string consumer_ip = 9;
  inline bool has_consumer_ip() const;
  inline void clear_consumer_ip();
  static const int kConsumerIpFieldNumber = 9;
  inline const ::std::string& consumer_ip() const;
  inline void set_consumer_ip(const ::std::string& value);
  inline void set_consumer_ip(const char* value);
  inline void set_consumer_ip(const char* value, size_t size);
  inline ::std::string* mutable_consumer_ip();
  inline ::std::string* release_consumer_ip();
  inline void set_allocated_consumer_ip(::std::string* consumer_ip);

  // @@protoc_insertion_point(class_scope:Report.FzReader)
 private:
  inline void set_has_in_bytes();
  inline void clear_has_in_bytes();
  inline void set_has_in_bytes_bw();
  inline void clear_has_in_bytes_bw();
  inline void set_has_out_bytes();
  inline void clear_has_out_bytes();
  inline void set_has_out_bytes_bw();
  inline void clear_has_out_bytes_bw();
  inline void set_has_in_events();
  inline void clear_has_in_events();
  inline void set_has_in_events_bw();
  inline void clear_has_in_events_bw();
  inline void set_has_out_events();
  inline void clear_has_out_events();
  inline void set_has_out_events_bw();
  inline void clear_has_out_events_bw();
  inline void set_has_consumer_ip();
  inline void clear_has_consumer_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 in_bytes_;
  ::google::protobuf::uint64 out_bytes_;
  ::google::protobuf::uint32 in_bytes_bw_;
  ::google::protobuf::uint32 out_bytes_bw_;
  ::google::protobuf::uint64 in_events_;
  ::google::protobuf::uint64 out_events_;
  ::google::protobuf::uint32 in_events_bw_;
  ::google::protobuf::uint32 out_events_bw_;
  ::std::string* consumer_ip_;
  friend void  protobuf_AddDesc_FzNodeReport_2eproto();
  friend void protobuf_AssignDesc_FzNodeReport_2eproto();
  friend void protobuf_ShutdownFile_FzNodeReport_2eproto();

  void InitAsDefaultInstance();
  static FzReader* default_instance_;
};
// -------------------------------------------------------------------

class FzParser : public ::google::protobuf::Message {
 public:
  FzParser();
  virtual ~FzParser();

  FzParser(const FzParser& from);

  inline FzParser& operator=(const FzParser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FzParser& default_instance();

  void Swap(FzParser* other);

  // implements Message ----------------------------------------------

  FzParser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FzParser& from);
  void MergeFrom(const FzParser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 in_bytes = 1;
  inline bool has_in_bytes() const;
  inline void clear_in_bytes();
  static const int kInBytesFieldNumber = 1;
  inline ::google::protobuf::uint64 in_bytes() const;
  inline void set_in_bytes(::google::protobuf::uint64 value);

  // optional uint32 in_bytes_bw = 2;
  inline bool has_in_bytes_bw() const;
  inline void clear_in_bytes_bw();
  static const int kInBytesBwFieldNumber = 2;
  inline ::google::protobuf::uint32 in_bytes_bw() const;
  inline void set_in_bytes_bw(::google::protobuf::uint32 value);

  // required uint64 out_bytes = 3;
  inline bool has_out_bytes() const;
  inline void clear_out_bytes();
  static const int kOutBytesFieldNumber = 3;
  inline ::google::protobuf::uint64 out_bytes() const;
  inline void set_out_bytes(::google::protobuf::uint64 value);

  // optional uint32 out_bytes_bw = 4;
  inline bool has_out_bytes_bw() const;
  inline void clear_out_bytes_bw();
  static const int kOutBytesBwFieldNumber = 4;
  inline ::google::protobuf::uint32 out_bytes_bw() const;
  inline void set_out_bytes_bw(::google::protobuf::uint32 value);

  // required uint64 in_events = 5;
  inline bool has_in_events() const;
  inline void clear_in_events();
  static const int kInEventsFieldNumber = 5;
  inline ::google::protobuf::uint64 in_events() const;
  inline void set_in_events(::google::protobuf::uint64 value);

  // optional uint32 in_events_bw = 6;
  inline bool has_in_events_bw() const;
  inline void clear_in_events_bw();
  static const int kInEventsBwFieldNumber = 6;
  inline ::google::protobuf::uint32 in_events_bw() const;
  inline void set_in_events_bw(::google::protobuf::uint32 value);

  // required uint64 out_events = 7;
  inline bool has_out_events() const;
  inline void clear_out_events();
  static const int kOutEventsFieldNumber = 7;
  inline ::google::protobuf::uint64 out_events() const;
  inline void set_out_events(::google::protobuf::uint64 value);

  // optional uint32 out_events_bw = 8;
  inline bool has_out_events_bw() const;
  inline void clear_out_events_bw();
  static const int kOutEventsBwFieldNumber = 8;
  inline ::google::protobuf::uint32 out_events_bw() const;
  inline void set_out_events_bw(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Report.FzParser)
 private:
  inline void set_has_in_bytes();
  inline void clear_has_in_bytes();
  inline void set_has_in_bytes_bw();
  inline void clear_has_in_bytes_bw();
  inline void set_has_out_bytes();
  inline void clear_has_out_bytes();
  inline void set_has_out_bytes_bw();
  inline void clear_has_out_bytes_bw();
  inline void set_has_in_events();
  inline void clear_has_in_events();
  inline void set_has_in_events_bw();
  inline void clear_has_in_events_bw();
  inline void set_has_out_events();
  inline void clear_has_out_events();
  inline void set_has_out_events_bw();
  inline void clear_has_out_events_bw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 in_bytes_;
  ::google::protobuf::uint64 out_bytes_;
  ::google::protobuf::uint32 in_bytes_bw_;
  ::google::protobuf::uint32 out_bytes_bw_;
  ::google::protobuf::uint64 in_events_;
  ::google::protobuf::uint64 out_events_;
  ::google::protobuf::uint32 in_events_bw_;
  ::google::protobuf::uint32 out_events_bw_;
  friend void  protobuf_AddDesc_FzNodeReport_2eproto();
  friend void protobuf_AssignDesc_FzNodeReport_2eproto();
  friend void protobuf_ShutdownFile_FzNodeReport_2eproto();

  void InitAsDefaultInstance();
  static FzParser* default_instance_;
};
// -------------------------------------------------------------------

class FzFSM : public ::google::protobuf::Message {
 public:
  FzFSM();
  virtual ~FzFSM();

  FzFSM(const FzFSM& from);

  inline FzFSM& operator=(const FzFSM& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FzFSM& default_instance();

  void Swap(FzFSM* other);

  // implements Message ----------------------------------------------

  FzFSM* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FzFSM& from);
  void MergeFrom(const FzFSM& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 in_bytes = 1;
  inline bool has_in_bytes() const;
  inline void clear_in_bytes();
  static const int kInBytesFieldNumber = 1;
  inline ::google::protobuf::uint64 in_bytes() const;
  inline void set_in_bytes(::google::protobuf::uint64 value);

  // optional uint32 in_bytes_bw = 2;
  inline bool has_in_bytes_bw() const;
  inline void clear_in_bytes_bw();
  static const int kInBytesBwFieldNumber = 2;
  inline ::google::protobuf::uint32 in_bytes_bw() const;
  inline void set_in_bytes_bw(::google::protobuf::uint32 value);

  // required uint64 out_bytes = 3;
  inline bool has_out_bytes() const;
  inline void clear_out_bytes();
  static const int kOutBytesFieldNumber = 3;
  inline ::google::protobuf::uint64 out_bytes() const;
  inline void set_out_bytes(::google::protobuf::uint64 value);

  // optional uint32 out_bytes_bw = 4;
  inline bool has_out_bytes_bw() const;
  inline void clear_out_bytes_bw();
  static const int kOutBytesBwFieldNumber = 4;
  inline ::google::protobuf::uint32 out_bytes_bw() const;
  inline void set_out_bytes_bw(::google::protobuf::uint32 value);

  // required uint64 in_events = 5;
  inline bool has_in_events() const;
  inline void clear_in_events();
  static const int kInEventsFieldNumber = 5;
  inline ::google::protobuf::uint64 in_events() const;
  inline void set_in_events(::google::protobuf::uint64 value);

  // optional uint32 in_events_bw = 6;
  inline bool has_in_events_bw() const;
  inline void clear_in_events_bw();
  static const int kInEventsBwFieldNumber = 6;
  inline ::google::protobuf::uint32 in_events_bw() const;
  inline void set_in_events_bw(::google::protobuf::uint32 value);

  // required uint64 out_events = 7;
  inline bool has_out_events() const;
  inline void clear_out_events();
  static const int kOutEventsFieldNumber = 7;
  inline ::google::protobuf::uint64 out_events() const;
  inline void set_out_events(::google::protobuf::uint64 value);

  // optional uint32 out_events_bw = 8;
  inline bool has_out_events_bw() const;
  inline void clear_out_events_bw();
  static const int kOutEventsBwFieldNumber = 8;
  inline ::google::protobuf::uint32 out_events_bw() const;
  inline void set_out_events_bw(::google::protobuf::uint32 value);

  // required uint64 state_invalid = 9;
  inline bool has_state_invalid() const;
  inline void clear_state_invalid();
  static const int kStateInvalidFieldNumber = 9;
  inline ::google::protobuf::uint64 state_invalid() const;
  inline void set_state_invalid(::google::protobuf::uint64 value);

  // required uint64 events_empty = 10;
  inline bool has_events_empty() const;
  inline void clear_events_empty();
  static const int kEventsEmptyFieldNumber = 10;
  inline ::google::protobuf::uint64 events_empty() const;
  inline void set_events_empty(::google::protobuf::uint64 value);

  // required uint64 events_good = 11;
  inline bool has_events_good() const;
  inline void clear_events_good();
  static const int kEventsGoodFieldNumber = 11;
  inline ::google::protobuf::uint64 events_good() const;
  inline void set_events_good(::google::protobuf::uint64 value);

  // required uint64 events_bad = 12;
  inline bool has_events_bad() const;
  inline void clear_events_bad();
  static const int kEventsBadFieldNumber = 12;
  inline ::google::protobuf::uint64 events_bad() const;
  inline void set_events_bad(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Report.FzFSM)
 private:
  inline void set_has_in_bytes();
  inline void clear_has_in_bytes();
  inline void set_has_in_bytes_bw();
  inline void clear_has_in_bytes_bw();
  inline void set_has_out_bytes();
  inline void clear_has_out_bytes();
  inline void set_has_out_bytes_bw();
  inline void clear_has_out_bytes_bw();
  inline void set_has_in_events();
  inline void clear_has_in_events();
  inline void set_has_in_events_bw();
  inline void clear_has_in_events_bw();
  inline void set_has_out_events();
  inline void clear_has_out_events();
  inline void set_has_out_events_bw();
  inline void clear_has_out_events_bw();
  inline void set_has_state_invalid();
  inline void clear_has_state_invalid();
  inline void set_has_events_empty();
  inline void clear_has_events_empty();
  inline void set_has_events_good();
  inline void clear_has_events_good();
  inline void set_has_events_bad();
  inline void clear_has_events_bad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 in_bytes_;
  ::google::protobuf::uint64 out_bytes_;
  ::google::protobuf::uint32 in_bytes_bw_;
  ::google::protobuf::uint32 out_bytes_bw_;
  ::google::protobuf::uint64 in_events_;
  ::google::protobuf::uint64 out_events_;
  ::google::protobuf::uint32 in_events_bw_;
  ::google::protobuf::uint32 out_events_bw_;
  ::google::protobuf::uint64 state_invalid_;
  ::google::protobuf::uint64 events_empty_;
  ::google::protobuf::uint64 events_good_;
  ::google::protobuf::uint64 events_bad_;
  friend void  protobuf_AddDesc_FzNodeReport_2eproto();
  friend void protobuf_AssignDesc_FzNodeReport_2eproto();
  friend void protobuf_ShutdownFile_FzNodeReport_2eproto();

  void InitAsDefaultInstance();
  static FzFSM* default_instance_;
};
// -------------------------------------------------------------------

class FzWriter : public ::google::protobuf::Message {
 public:
  FzWriter();
  virtual ~FzWriter();

  FzWriter(const FzWriter& from);

  inline FzWriter& operator=(const FzWriter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FzWriter& default_instance();

  void Swap(FzWriter* other);

  // implements Message ----------------------------------------------

  FzWriter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FzWriter& from);
  void MergeFrom(const FzWriter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 in_bytes = 1;
  inline bool has_in_bytes() const;
  inline void clear_in_bytes();
  static const int kInBytesFieldNumber = 1;
  inline ::google::protobuf::uint64 in_bytes() const;
  inline void set_in_bytes(::google::protobuf::uint64 value);

  // optional uint32 in_bytes_bw = 2;
  inline bool has_in_bytes_bw() const;
  inline void clear_in_bytes_bw();
  static const int kInBytesBwFieldNumber = 2;
  inline ::google::protobuf::uint32 in_bytes_bw() const;
  inline void set_in_bytes_bw(::google::protobuf::uint32 value);

  // required uint64 out_bytes = 3;
  inline bool has_out_bytes() const;
  inline void clear_out_bytes();
  static const int kOutBytesFieldNumber = 3;
  inline ::google::protobuf::uint64 out_bytes() const;
  inline void set_out_bytes(::google::protobuf::uint64 value);

  // optional uint32 out_bytes_bw = 4;
  inline bool has_out_bytes_bw() const;
  inline void clear_out_bytes_bw();
  static const int kOutBytesBwFieldNumber = 4;
  inline ::google::protobuf::uint32 out_bytes_bw() const;
  inline void set_out_bytes_bw(::google::protobuf::uint32 value);

  // required uint64 in_events = 5;
  inline bool has_in_events() const;
  inline void clear_in_events();
  static const int kInEventsFieldNumber = 5;
  inline ::google::protobuf::uint64 in_events() const;
  inline void set_in_events(::google::protobuf::uint64 value);

  // optional uint32 in_events_bw = 6;
  inline bool has_in_events_bw() const;
  inline void clear_in_events_bw();
  static const int kInEventsBwFieldNumber = 6;
  inline ::google::protobuf::uint32 in_events_bw() const;
  inline void set_in_events_bw(::google::protobuf::uint32 value);

  // required uint64 out_events = 7;
  inline bool has_out_events() const;
  inline void clear_out_events();
  static const int kOutEventsFieldNumber = 7;
  inline ::google::protobuf::uint64 out_events() const;
  inline void set_out_events(::google::protobuf::uint64 value);

  // optional uint32 out_events_bw = 8;
  inline bool has_out_events_bw() const;
  inline void clear_out_events_bw();
  static const int kOutEventsBwFieldNumber = 8;
  inline ::google::protobuf::uint32 out_events_bw() const;
  inline void set_out_events_bw(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Report.FzWriter)
 private:
  inline void set_has_in_bytes();
  inline void clear_has_in_bytes();
  inline void set_has_in_bytes_bw();
  inline void clear_has_in_bytes_bw();
  inline void set_has_out_bytes();
  inline void clear_has_out_bytes();
  inline void set_has_out_bytes_bw();
  inline void clear_has_out_bytes_bw();
  inline void set_has_in_events();
  inline void clear_has_in_events();
  inline void set_has_in_events_bw();
  inline void clear_has_in_events_bw();
  inline void set_has_out_events();
  inline void clear_has_out_events();
  inline void set_has_out_events_bw();
  inline void clear_has_out_events_bw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 in_bytes_;
  ::google::protobuf::uint64 out_bytes_;
  ::google::protobuf::uint32 in_bytes_bw_;
  ::google::protobuf::uint32 out_bytes_bw_;
  ::google::protobuf::uint64 in_events_;
  ::google::protobuf::uint64 out_events_;
  ::google::protobuf::uint32 in_events_bw_;
  ::google::protobuf::uint32 out_events_bw_;
  friend void  protobuf_AddDesc_FzNodeReport_2eproto();
  friend void protobuf_AssignDesc_FzNodeReport_2eproto();
  friend void protobuf_ShutdownFile_FzNodeReport_2eproto();

  void InitAsDefaultInstance();
  static FzWriter* default_instance_;
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string hostname = 1;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 1;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const char* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // required string profile = 2;
  inline bool has_profile() const;
  inline void clear_profile();
  static const int kProfileFieldNumber = 2;
  inline const ::std::string& profile() const;
  inline void set_profile(const ::std::string& value);
  inline void set_profile(const char* value);
  inline void set_profile(const char* value, size_t size);
  inline ::std::string* mutable_profile();
  inline ::std::string* release_profile();
  inline void set_allocated_profile(::std::string* profile);

  // optional uint32 parser_num = 3;
  inline bool has_parser_num() const;
  inline void clear_parser_num();
  static const int kParserNumFieldNumber = 3;
  inline ::google::protobuf::uint32 parser_num() const;
  inline void set_parser_num(::google::protobuf::uint32 value);

  // optional uint32 parser_busy = 4;
  inline bool has_parser_busy() const;
  inline void clear_parser_busy();
  static const int kParserBusyFieldNumber = 4;
  inline ::google::protobuf::uint32 parser_busy() const;
  inline void set_parser_busy(::google::protobuf::uint32 value);

  // optional uint32 parser_free = 5;
  inline bool has_parser_free() const;
  inline void clear_parser_free();
  static const int kParserFreeFieldNumber = 5;
  inline ::google::protobuf::uint32 parser_free() const;
  inline void set_parser_free(::google::protobuf::uint32 value);

  // optional .Report.FzReader reader = 6;
  inline bool has_reader() const;
  inline void clear_reader();
  static const int kReaderFieldNumber = 6;
  inline const ::Report::FzReader& reader() const;
  inline ::Report::FzReader* mutable_reader();
  inline ::Report::FzReader* release_reader();
  inline void set_allocated_reader(::Report::FzReader* reader);

  // repeated .Report.FzParser parser = 7;
  inline int parser_size() const;
  inline void clear_parser();
  static const int kParserFieldNumber = 7;
  inline const ::Report::FzParser& parser(int index) const;
  inline ::Report::FzParser* mutable_parser(int index);
  inline ::Report::FzParser* add_parser();
  inline const ::google::protobuf::RepeatedPtrField< ::Report::FzParser >&
      parser() const;
  inline ::google::protobuf::RepeatedPtrField< ::Report::FzParser >*
      mutable_parser();

  // repeated .Report.FzFSM fsm = 8;
  inline int fsm_size() const;
  inline void clear_fsm();
  static const int kFsmFieldNumber = 8;
  inline const ::Report::FzFSM& fsm(int index) const;
  inline ::Report::FzFSM* mutable_fsm(int index);
  inline ::Report::FzFSM* add_fsm();
  inline const ::google::protobuf::RepeatedPtrField< ::Report::FzFSM >&
      fsm() const;
  inline ::google::protobuf::RepeatedPtrField< ::Report::FzFSM >*
      mutable_fsm();

  // optional .Report.FzWriter writer = 9;
  inline bool has_writer() const;
  inline void clear_writer();
  static const int kWriterFieldNumber = 9;
  inline const ::Report::FzWriter& writer() const;
  inline ::Report::FzWriter* mutable_writer();
  inline ::Report::FzWriter* release_writer();
  inline void set_allocated_writer(::Report::FzWriter* writer);

  // @@protoc_insertion_point(class_scope:Report.Node)
 private:
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_profile();
  inline void clear_has_profile();
  inline void set_has_parser_num();
  inline void clear_has_parser_num();
  inline void set_has_parser_busy();
  inline void clear_has_parser_busy();
  inline void set_has_parser_free();
  inline void clear_has_parser_free();
  inline void set_has_reader();
  inline void clear_has_reader();
  inline void set_has_writer();
  inline void clear_has_writer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* hostname_;
  ::std::string* profile_;
  ::google::protobuf::uint32 parser_num_;
  ::google::protobuf::uint32 parser_busy_;
  ::Report::FzReader* reader_;
  ::google::protobuf::RepeatedPtrField< ::Report::FzParser > parser_;
  ::google::protobuf::RepeatedPtrField< ::Report::FzFSM > fsm_;
  ::Report::FzWriter* writer_;
  ::google::protobuf::uint32 parser_free_;
  friend void  protobuf_AddDesc_FzNodeReport_2eproto();
  friend void protobuf_AssignDesc_FzNodeReport_2eproto();
  friend void protobuf_ShutdownFile_FzNodeReport_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// ===================================================================


// ===================================================================

// FzReader

// required uint64 in_bytes = 1;
inline bool FzReader::has_in_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FzReader::set_has_in_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FzReader::clear_has_in_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FzReader::clear_in_bytes() {
  in_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_in_bytes();
}
inline ::google::protobuf::uint64 FzReader::in_bytes() const {
  // @@protoc_insertion_point(field_get:Report.FzReader.in_bytes)
  return in_bytes_;
}
inline void FzReader::set_in_bytes(::google::protobuf::uint64 value) {
  set_has_in_bytes();
  in_bytes_ = value;
  // @@protoc_insertion_point(field_set:Report.FzReader.in_bytes)
}

// optional uint32 in_bytes_bw = 2;
inline bool FzReader::has_in_bytes_bw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FzReader::set_has_in_bytes_bw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FzReader::clear_has_in_bytes_bw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FzReader::clear_in_bytes_bw() {
  in_bytes_bw_ = 0u;
  clear_has_in_bytes_bw();
}
inline ::google::protobuf::uint32 FzReader::in_bytes_bw() const {
  // @@protoc_insertion_point(field_get:Report.FzReader.in_bytes_bw)
  return in_bytes_bw_;
}
inline void FzReader::set_in_bytes_bw(::google::protobuf::uint32 value) {
  set_has_in_bytes_bw();
  in_bytes_bw_ = value;
  // @@protoc_insertion_point(field_set:Report.FzReader.in_bytes_bw)
}

// optional uint64 out_bytes = 3;
inline bool FzReader::has_out_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FzReader::set_has_out_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FzReader::clear_has_out_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FzReader::clear_out_bytes() {
  out_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_out_bytes();
}
inline ::google::protobuf::uint64 FzReader::out_bytes() const {
  // @@protoc_insertion_point(field_get:Report.FzReader.out_bytes)
  return out_bytes_;
}
inline void FzReader::set_out_bytes(::google::protobuf::uint64 value) {
  set_has_out_bytes();
  out_bytes_ = value;
  // @@protoc_insertion_point(field_set:Report.FzReader.out_bytes)
}

// optional uint32 out_bytes_bw = 4;
inline bool FzReader::has_out_bytes_bw() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FzReader::set_has_out_bytes_bw() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FzReader::clear_has_out_bytes_bw() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FzReader::clear_out_bytes_bw() {
  out_bytes_bw_ = 0u;
  clear_has_out_bytes_bw();
}
inline ::google::protobuf::uint32 FzReader::out_bytes_bw() const {
  // @@protoc_insertion_point(field_get:Report.FzReader.out_bytes_bw)
  return out_bytes_bw_;
}
inline void FzReader::set_out_bytes_bw(::google::protobuf::uint32 value) {
  set_has_out_bytes_bw();
  out_bytes_bw_ = value;
  // @@protoc_insertion_point(field_set:Report.FzReader.out_bytes_bw)
}

// required uint64 in_events = 5;
inline bool FzReader::has_in_events() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FzReader::set_has_in_events() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FzReader::clear_has_in_events() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FzReader::clear_in_events() {
  in_events_ = GOOGLE_ULONGLONG(0);
  clear_has_in_events();
}
inline ::google::protobuf::uint64 FzReader::in_events() const {
  // @@protoc_insertion_point(field_get:Report.FzReader.in_events)
  return in_events_;
}
inline void FzReader::set_in_events(::google::protobuf::uint64 value) {
  set_has_in_events();
  in_events_ = value;
  // @@protoc_insertion_point(field_set:Report.FzReader.in_events)
}

// optional uint32 in_events_bw = 6;
inline bool FzReader::has_in_events_bw() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FzReader::set_has_in_events_bw() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FzReader::clear_has_in_events_bw() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FzReader::clear_in_events_bw() {
  in_events_bw_ = 0u;
  clear_has_in_events_bw();
}
inline ::google::protobuf::uint32 FzReader::in_events_bw() const {
  // @@protoc_insertion_point(field_get:Report.FzReader.in_events_bw)
  return in_events_bw_;
}
inline void FzReader::set_in_events_bw(::google::protobuf::uint32 value) {
  set_has_in_events_bw();
  in_events_bw_ = value;
  // @@protoc_insertion_point(field_set:Report.FzReader.in_events_bw)
}

// optional uint64 out_events = 7;
inline bool FzReader::has_out_events() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FzReader::set_has_out_events() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FzReader::clear_has_out_events() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FzReader::clear_out_events() {
  out_events_ = GOOGLE_ULONGLONG(0);
  clear_has_out_events();
}
inline ::google::protobuf::uint64 FzReader::out_events() const {
  // @@protoc_insertion_point(field_get:Report.FzReader.out_events)
  return out_events_;
}
inline void FzReader::set_out_events(::google::protobuf::uint64 value) {
  set_has_out_events();
  out_events_ = value;
  // @@protoc_insertion_point(field_set:Report.FzReader.out_events)
}

// optional uint32 out_events_bw = 8;
inline bool FzReader::has_out_events_bw() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FzReader::set_has_out_events_bw() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FzReader::clear_has_out_events_bw() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FzReader::clear_out_events_bw() {
  out_events_bw_ = 0u;
  clear_has_out_events_bw();
}
inline ::google::protobuf::uint32 FzReader::out_events_bw() const {
  // @@protoc_insertion_point(field_get:Report.FzReader.out_events_bw)
  return out_events_bw_;
}
inline void FzReader::set_out_events_bw(::google::protobuf::uint32 value) {
  set_has_out_events_bw();
  out_events_bw_ = value;
  // @@protoc_insertion_point(field_set:Report.FzReader.out_events_bw)
}

// optional string consumer_ip = 9;
inline bool FzReader::has_consumer_ip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FzReader::set_has_consumer_ip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FzReader::clear_has_consumer_ip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FzReader::clear_consumer_ip() {
  if (consumer_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    consumer_ip_->clear();
  }
  clear_has_consumer_ip();
}
inline const ::std::string& FzReader::consumer_ip() const {
  // @@protoc_insertion_point(field_get:Report.FzReader.consumer_ip)
  return *consumer_ip_;
}
inline void FzReader::set_consumer_ip(const ::std::string& value) {
  set_has_consumer_ip();
  if (consumer_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    consumer_ip_ = new ::std::string;
  }
  consumer_ip_->assign(value);
  // @@protoc_insertion_point(field_set:Report.FzReader.consumer_ip)
}
inline void FzReader::set_consumer_ip(const char* value) {
  set_has_consumer_ip();
  if (consumer_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    consumer_ip_ = new ::std::string;
  }
  consumer_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:Report.FzReader.consumer_ip)
}
inline void FzReader::set_consumer_ip(const char* value, size_t size) {
  set_has_consumer_ip();
  if (consumer_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    consumer_ip_ = new ::std::string;
  }
  consumer_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Report.FzReader.consumer_ip)
}
inline ::std::string* FzReader::mutable_consumer_ip() {
  set_has_consumer_ip();
  if (consumer_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    consumer_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Report.FzReader.consumer_ip)
  return consumer_ip_;
}
inline ::std::string* FzReader::release_consumer_ip() {
  clear_has_consumer_ip();
  if (consumer_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = consumer_ip_;
    consumer_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FzReader::set_allocated_consumer_ip(::std::string* consumer_ip) {
  if (consumer_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete consumer_ip_;
  }
  if (consumer_ip) {
    set_has_consumer_ip();
    consumer_ip_ = consumer_ip;
  } else {
    clear_has_consumer_ip();
    consumer_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Report.FzReader.consumer_ip)
}

// -------------------------------------------------------------------

// FzParser

// required uint64 in_bytes = 1;
inline bool FzParser::has_in_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FzParser::set_has_in_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FzParser::clear_has_in_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FzParser::clear_in_bytes() {
  in_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_in_bytes();
}
inline ::google::protobuf::uint64 FzParser::in_bytes() const {
  // @@protoc_insertion_point(field_get:Report.FzParser.in_bytes)
  return in_bytes_;
}
inline void FzParser::set_in_bytes(::google::protobuf::uint64 value) {
  set_has_in_bytes();
  in_bytes_ = value;
  // @@protoc_insertion_point(field_set:Report.FzParser.in_bytes)
}

// optional uint32 in_bytes_bw = 2;
inline bool FzParser::has_in_bytes_bw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FzParser::set_has_in_bytes_bw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FzParser::clear_has_in_bytes_bw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FzParser::clear_in_bytes_bw() {
  in_bytes_bw_ = 0u;
  clear_has_in_bytes_bw();
}
inline ::google::protobuf::uint32 FzParser::in_bytes_bw() const {
  // @@protoc_insertion_point(field_get:Report.FzParser.in_bytes_bw)
  return in_bytes_bw_;
}
inline void FzParser::set_in_bytes_bw(::google::protobuf::uint32 value) {
  set_has_in_bytes_bw();
  in_bytes_bw_ = value;
  // @@protoc_insertion_point(field_set:Report.FzParser.in_bytes_bw)
}

// required uint64 out_bytes = 3;
inline bool FzParser::has_out_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FzParser::set_has_out_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FzParser::clear_has_out_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FzParser::clear_out_bytes() {
  out_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_out_bytes();
}
inline ::google::protobuf::uint64 FzParser::out_bytes() const {
  // @@protoc_insertion_point(field_get:Report.FzParser.out_bytes)
  return out_bytes_;
}
inline void FzParser::set_out_bytes(::google::protobuf::uint64 value) {
  set_has_out_bytes();
  out_bytes_ = value;
  // @@protoc_insertion_point(field_set:Report.FzParser.out_bytes)
}

// optional uint32 out_bytes_bw = 4;
inline bool FzParser::has_out_bytes_bw() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FzParser::set_has_out_bytes_bw() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FzParser::clear_has_out_bytes_bw() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FzParser::clear_out_bytes_bw() {
  out_bytes_bw_ = 0u;
  clear_has_out_bytes_bw();
}
inline ::google::protobuf::uint32 FzParser::out_bytes_bw() const {
  // @@protoc_insertion_point(field_get:Report.FzParser.out_bytes_bw)
  return out_bytes_bw_;
}
inline void FzParser::set_out_bytes_bw(::google::protobuf::uint32 value) {
  set_has_out_bytes_bw();
  out_bytes_bw_ = value;
  // @@protoc_insertion_point(field_set:Report.FzParser.out_bytes_bw)
}

// required uint64 in_events = 5;
inline bool FzParser::has_in_events() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FzParser::set_has_in_events() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FzParser::clear_has_in_events() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FzParser::clear_in_events() {
  in_events_ = GOOGLE_ULONGLONG(0);
  clear_has_in_events();
}
inline ::google::protobuf::uint64 FzParser::in_events() const {
  // @@protoc_insertion_point(field_get:Report.FzParser.in_events)
  return in_events_;
}
inline void FzParser::set_in_events(::google::protobuf::uint64 value) {
  set_has_in_events();
  in_events_ = value;
  // @@protoc_insertion_point(field_set:Report.FzParser.in_events)
}

// optional uint32 in_events_bw = 6;
inline bool FzParser::has_in_events_bw() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FzParser::set_has_in_events_bw() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FzParser::clear_has_in_events_bw() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FzParser::clear_in_events_bw() {
  in_events_bw_ = 0u;
  clear_has_in_events_bw();
}
inline ::google::protobuf::uint32 FzParser::in_events_bw() const {
  // @@protoc_insertion_point(field_get:Report.FzParser.in_events_bw)
  return in_events_bw_;
}
inline void FzParser::set_in_events_bw(::google::protobuf::uint32 value) {
  set_has_in_events_bw();
  in_events_bw_ = value;
  // @@protoc_insertion_point(field_set:Report.FzParser.in_events_bw)
}

// required uint64 out_events = 7;
inline bool FzParser::has_out_events() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FzParser::set_has_out_events() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FzParser::clear_has_out_events() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FzParser::clear_out_events() {
  out_events_ = GOOGLE_ULONGLONG(0);
  clear_has_out_events();
}
inline ::google::protobuf::uint64 FzParser::out_events() const {
  // @@protoc_insertion_point(field_get:Report.FzParser.out_events)
  return out_events_;
}
inline void FzParser::set_out_events(::google::protobuf::uint64 value) {
  set_has_out_events();
  out_events_ = value;
  // @@protoc_insertion_point(field_set:Report.FzParser.out_events)
}

// optional uint32 out_events_bw = 8;
inline bool FzParser::has_out_events_bw() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FzParser::set_has_out_events_bw() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FzParser::clear_has_out_events_bw() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FzParser::clear_out_events_bw() {
  out_events_bw_ = 0u;
  clear_has_out_events_bw();
}
inline ::google::protobuf::uint32 FzParser::out_events_bw() const {
  // @@protoc_insertion_point(field_get:Report.FzParser.out_events_bw)
  return out_events_bw_;
}
inline void FzParser::set_out_events_bw(::google::protobuf::uint32 value) {
  set_has_out_events_bw();
  out_events_bw_ = value;
  // @@protoc_insertion_point(field_set:Report.FzParser.out_events_bw)
}

// -------------------------------------------------------------------

// FzFSM

// required uint64 in_bytes = 1;
inline bool FzFSM::has_in_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FzFSM::set_has_in_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FzFSM::clear_has_in_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FzFSM::clear_in_bytes() {
  in_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_in_bytes();
}
inline ::google::protobuf::uint64 FzFSM::in_bytes() const {
  // @@protoc_insertion_point(field_get:Report.FzFSM.in_bytes)
  return in_bytes_;
}
inline void FzFSM::set_in_bytes(::google::protobuf::uint64 value) {
  set_has_in_bytes();
  in_bytes_ = value;
  // @@protoc_insertion_point(field_set:Report.FzFSM.in_bytes)
}

// optional uint32 in_bytes_bw = 2;
inline bool FzFSM::has_in_bytes_bw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FzFSM::set_has_in_bytes_bw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FzFSM::clear_has_in_bytes_bw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FzFSM::clear_in_bytes_bw() {
  in_bytes_bw_ = 0u;
  clear_has_in_bytes_bw();
}
inline ::google::protobuf::uint32 FzFSM::in_bytes_bw() const {
  // @@protoc_insertion_point(field_get:Report.FzFSM.in_bytes_bw)
  return in_bytes_bw_;
}
inline void FzFSM::set_in_bytes_bw(::google::protobuf::uint32 value) {
  set_has_in_bytes_bw();
  in_bytes_bw_ = value;
  // @@protoc_insertion_point(field_set:Report.FzFSM.in_bytes_bw)
}

// required uint64 out_bytes = 3;
inline bool FzFSM::has_out_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FzFSM::set_has_out_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FzFSM::clear_has_out_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FzFSM::clear_out_bytes() {
  out_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_out_bytes();
}
inline ::google::protobuf::uint64 FzFSM::out_bytes() const {
  // @@protoc_insertion_point(field_get:Report.FzFSM.out_bytes)
  return out_bytes_;
}
inline void FzFSM::set_out_bytes(::google::protobuf::uint64 value) {
  set_has_out_bytes();
  out_bytes_ = value;
  // @@protoc_insertion_point(field_set:Report.FzFSM.out_bytes)
}

// optional uint32 out_bytes_bw = 4;
inline bool FzFSM::has_out_bytes_bw() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FzFSM::set_has_out_bytes_bw() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FzFSM::clear_has_out_bytes_bw() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FzFSM::clear_out_bytes_bw() {
  out_bytes_bw_ = 0u;
  clear_has_out_bytes_bw();
}
inline ::google::protobuf::uint32 FzFSM::out_bytes_bw() const {
  // @@protoc_insertion_point(field_get:Report.FzFSM.out_bytes_bw)
  return out_bytes_bw_;
}
inline void FzFSM::set_out_bytes_bw(::google::protobuf::uint32 value) {
  set_has_out_bytes_bw();
  out_bytes_bw_ = value;
  // @@protoc_insertion_point(field_set:Report.FzFSM.out_bytes_bw)
}

// required uint64 in_events = 5;
inline bool FzFSM::has_in_events() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FzFSM::set_has_in_events() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FzFSM::clear_has_in_events() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FzFSM::clear_in_events() {
  in_events_ = GOOGLE_ULONGLONG(0);
  clear_has_in_events();
}
inline ::google::protobuf::uint64 FzFSM::in_events() const {
  // @@protoc_insertion_point(field_get:Report.FzFSM.in_events)
  return in_events_;
}
inline void FzFSM::set_in_events(::google::protobuf::uint64 value) {
  set_has_in_events();
  in_events_ = value;
  // @@protoc_insertion_point(field_set:Report.FzFSM.in_events)
}

// optional uint32 in_events_bw = 6;
inline bool FzFSM::has_in_events_bw() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FzFSM::set_has_in_events_bw() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FzFSM::clear_has_in_events_bw() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FzFSM::clear_in_events_bw() {
  in_events_bw_ = 0u;
  clear_has_in_events_bw();
}
inline ::google::protobuf::uint32 FzFSM::in_events_bw() const {
  // @@protoc_insertion_point(field_get:Report.FzFSM.in_events_bw)
  return in_events_bw_;
}
inline void FzFSM::set_in_events_bw(::google::protobuf::uint32 value) {
  set_has_in_events_bw();
  in_events_bw_ = value;
  // @@protoc_insertion_point(field_set:Report.FzFSM.in_events_bw)
}

// required uint64 out_events = 7;
inline bool FzFSM::has_out_events() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FzFSM::set_has_out_events() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FzFSM::clear_has_out_events() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FzFSM::clear_out_events() {
  out_events_ = GOOGLE_ULONGLONG(0);
  clear_has_out_events();
}
inline ::google::protobuf::uint64 FzFSM::out_events() const {
  // @@protoc_insertion_point(field_get:Report.FzFSM.out_events)
  return out_events_;
}
inline void FzFSM::set_out_events(::google::protobuf::uint64 value) {
  set_has_out_events();
  out_events_ = value;
  // @@protoc_insertion_point(field_set:Report.FzFSM.out_events)
}

// optional uint32 out_events_bw = 8;
inline bool FzFSM::has_out_events_bw() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FzFSM::set_has_out_events_bw() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FzFSM::clear_has_out_events_bw() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FzFSM::clear_out_events_bw() {
  out_events_bw_ = 0u;
  clear_has_out_events_bw();
}
inline ::google::protobuf::uint32 FzFSM::out_events_bw() const {
  // @@protoc_insertion_point(field_get:Report.FzFSM.out_events_bw)
  return out_events_bw_;
}
inline void FzFSM::set_out_events_bw(::google::protobuf::uint32 value) {
  set_has_out_events_bw();
  out_events_bw_ = value;
  // @@protoc_insertion_point(field_set:Report.FzFSM.out_events_bw)
}

// required uint64 state_invalid = 9;
inline bool FzFSM::has_state_invalid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FzFSM::set_has_state_invalid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FzFSM::clear_has_state_invalid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FzFSM::clear_state_invalid() {
  state_invalid_ = GOOGLE_ULONGLONG(0);
  clear_has_state_invalid();
}
inline ::google::protobuf::uint64 FzFSM::state_invalid() const {
  // @@protoc_insertion_point(field_get:Report.FzFSM.state_invalid)
  return state_invalid_;
}
inline void FzFSM::set_state_invalid(::google::protobuf::uint64 value) {
  set_has_state_invalid();
  state_invalid_ = value;
  // @@protoc_insertion_point(field_set:Report.FzFSM.state_invalid)
}

// required uint64 events_empty = 10;
inline bool FzFSM::has_events_empty() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FzFSM::set_has_events_empty() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FzFSM::clear_has_events_empty() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FzFSM::clear_events_empty() {
  events_empty_ = GOOGLE_ULONGLONG(0);
  clear_has_events_empty();
}
inline ::google::protobuf::uint64 FzFSM::events_empty() const {
  // @@protoc_insertion_point(field_get:Report.FzFSM.events_empty)
  return events_empty_;
}
inline void FzFSM::set_events_empty(::google::protobuf::uint64 value) {
  set_has_events_empty();
  events_empty_ = value;
  // @@protoc_insertion_point(field_set:Report.FzFSM.events_empty)
}

// required uint64 events_good = 11;
inline bool FzFSM::has_events_good() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FzFSM::set_has_events_good() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FzFSM::clear_has_events_good() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FzFSM::clear_events_good() {
  events_good_ = GOOGLE_ULONGLONG(0);
  clear_has_events_good();
}
inline ::google::protobuf::uint64 FzFSM::events_good() const {
  // @@protoc_insertion_point(field_get:Report.FzFSM.events_good)
  return events_good_;
}
inline void FzFSM::set_events_good(::google::protobuf::uint64 value) {
  set_has_events_good();
  events_good_ = value;
  // @@protoc_insertion_point(field_set:Report.FzFSM.events_good)
}

// required uint64 events_bad = 12;
inline bool FzFSM::has_events_bad() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FzFSM::set_has_events_bad() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FzFSM::clear_has_events_bad() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FzFSM::clear_events_bad() {
  events_bad_ = GOOGLE_ULONGLONG(0);
  clear_has_events_bad();
}
inline ::google::protobuf::uint64 FzFSM::events_bad() const {
  // @@protoc_insertion_point(field_get:Report.FzFSM.events_bad)
  return events_bad_;
}
inline void FzFSM::set_events_bad(::google::protobuf::uint64 value) {
  set_has_events_bad();
  events_bad_ = value;
  // @@protoc_insertion_point(field_set:Report.FzFSM.events_bad)
}

// -------------------------------------------------------------------

// FzWriter

// required uint64 in_bytes = 1;
inline bool FzWriter::has_in_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FzWriter::set_has_in_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FzWriter::clear_has_in_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FzWriter::clear_in_bytes() {
  in_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_in_bytes();
}
inline ::google::protobuf::uint64 FzWriter::in_bytes() const {
  // @@protoc_insertion_point(field_get:Report.FzWriter.in_bytes)
  return in_bytes_;
}
inline void FzWriter::set_in_bytes(::google::protobuf::uint64 value) {
  set_has_in_bytes();
  in_bytes_ = value;
  // @@protoc_insertion_point(field_set:Report.FzWriter.in_bytes)
}

// optional uint32 in_bytes_bw = 2;
inline bool FzWriter::has_in_bytes_bw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FzWriter::set_has_in_bytes_bw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FzWriter::clear_has_in_bytes_bw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FzWriter::clear_in_bytes_bw() {
  in_bytes_bw_ = 0u;
  clear_has_in_bytes_bw();
}
inline ::google::protobuf::uint32 FzWriter::in_bytes_bw() const {
  // @@protoc_insertion_point(field_get:Report.FzWriter.in_bytes_bw)
  return in_bytes_bw_;
}
inline void FzWriter::set_in_bytes_bw(::google::protobuf::uint32 value) {
  set_has_in_bytes_bw();
  in_bytes_bw_ = value;
  // @@protoc_insertion_point(field_set:Report.FzWriter.in_bytes_bw)
}

// required uint64 out_bytes = 3;
inline bool FzWriter::has_out_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FzWriter::set_has_out_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FzWriter::clear_has_out_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FzWriter::clear_out_bytes() {
  out_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_out_bytes();
}
inline ::google::protobuf::uint64 FzWriter::out_bytes() const {
  // @@protoc_insertion_point(field_get:Report.FzWriter.out_bytes)
  return out_bytes_;
}
inline void FzWriter::set_out_bytes(::google::protobuf::uint64 value) {
  set_has_out_bytes();
  out_bytes_ = value;
  // @@protoc_insertion_point(field_set:Report.FzWriter.out_bytes)
}

// optional uint32 out_bytes_bw = 4;
inline bool FzWriter::has_out_bytes_bw() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FzWriter::set_has_out_bytes_bw() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FzWriter::clear_has_out_bytes_bw() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FzWriter::clear_out_bytes_bw() {
  out_bytes_bw_ = 0u;
  clear_has_out_bytes_bw();
}
inline ::google::protobuf::uint32 FzWriter::out_bytes_bw() const {
  // @@protoc_insertion_point(field_get:Report.FzWriter.out_bytes_bw)
  return out_bytes_bw_;
}
inline void FzWriter::set_out_bytes_bw(::google::protobuf::uint32 value) {
  set_has_out_bytes_bw();
  out_bytes_bw_ = value;
  // @@protoc_insertion_point(field_set:Report.FzWriter.out_bytes_bw)
}

// required uint64 in_events = 5;
inline bool FzWriter::has_in_events() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FzWriter::set_has_in_events() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FzWriter::clear_has_in_events() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FzWriter::clear_in_events() {
  in_events_ = GOOGLE_ULONGLONG(0);
  clear_has_in_events();
}
inline ::google::protobuf::uint64 FzWriter::in_events() const {
  // @@protoc_insertion_point(field_get:Report.FzWriter.in_events)
  return in_events_;
}
inline void FzWriter::set_in_events(::google::protobuf::uint64 value) {
  set_has_in_events();
  in_events_ = value;
  // @@protoc_insertion_point(field_set:Report.FzWriter.in_events)
}

// optional uint32 in_events_bw = 6;
inline bool FzWriter::has_in_events_bw() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FzWriter::set_has_in_events_bw() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FzWriter::clear_has_in_events_bw() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FzWriter::clear_in_events_bw() {
  in_events_bw_ = 0u;
  clear_has_in_events_bw();
}
inline ::google::protobuf::uint32 FzWriter::in_events_bw() const {
  // @@protoc_insertion_point(field_get:Report.FzWriter.in_events_bw)
  return in_events_bw_;
}
inline void FzWriter::set_in_events_bw(::google::protobuf::uint32 value) {
  set_has_in_events_bw();
  in_events_bw_ = value;
  // @@protoc_insertion_point(field_set:Report.FzWriter.in_events_bw)
}

// required uint64 out_events = 7;
inline bool FzWriter::has_out_events() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FzWriter::set_has_out_events() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FzWriter::clear_has_out_events() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FzWriter::clear_out_events() {
  out_events_ = GOOGLE_ULONGLONG(0);
  clear_has_out_events();
}
inline ::google::protobuf::uint64 FzWriter::out_events() const {
  // @@protoc_insertion_point(field_get:Report.FzWriter.out_events)
  return out_events_;
}
inline void FzWriter::set_out_events(::google::protobuf::uint64 value) {
  set_has_out_events();
  out_events_ = value;
  // @@protoc_insertion_point(field_set:Report.FzWriter.out_events)
}

// optional uint32 out_events_bw = 8;
inline bool FzWriter::has_out_events_bw() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FzWriter::set_has_out_events_bw() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FzWriter::clear_has_out_events_bw() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FzWriter::clear_out_events_bw() {
  out_events_bw_ = 0u;
  clear_has_out_events_bw();
}
inline ::google::protobuf::uint32 FzWriter::out_events_bw() const {
  // @@protoc_insertion_point(field_get:Report.FzWriter.out_events_bw)
  return out_events_bw_;
}
inline void FzWriter::set_out_events_bw(::google::protobuf::uint32 value) {
  set_has_out_events_bw();
  out_events_bw_ = value;
  // @@protoc_insertion_point(field_set:Report.FzWriter.out_events_bw)
}

// -------------------------------------------------------------------

// Node

// required string hostname = 1;
inline bool Node::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& Node::hostname() const {
  // @@protoc_insertion_point(field_get:Report.Node.hostname)
  return *hostname_;
}
inline void Node::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
  // @@protoc_insertion_point(field_set:Report.Node.hostname)
}
inline void Node::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Report.Node.hostname)
}
inline void Node::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Report.Node.hostname)
}
inline ::std::string* Node::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Report.Node.hostname)
  return hostname_;
}
inline ::std::string* Node::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Node::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Report.Node.hostname)
}

// required string profile = 2;
inline bool Node::has_profile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_profile() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_profile() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_profile() {
  if (profile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profile_->clear();
  }
  clear_has_profile();
}
inline const ::std::string& Node::profile() const {
  // @@protoc_insertion_point(field_get:Report.Node.profile)
  return *profile_;
}
inline void Node::set_profile(const ::std::string& value) {
  set_has_profile();
  if (profile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profile_ = new ::std::string;
  }
  profile_->assign(value);
  // @@protoc_insertion_point(field_set:Report.Node.profile)
}
inline void Node::set_profile(const char* value) {
  set_has_profile();
  if (profile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profile_ = new ::std::string;
  }
  profile_->assign(value);
  // @@protoc_insertion_point(field_set_char:Report.Node.profile)
}
inline void Node::set_profile(const char* value, size_t size) {
  set_has_profile();
  if (profile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profile_ = new ::std::string;
  }
  profile_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Report.Node.profile)
}
inline ::std::string* Node::mutable_profile() {
  set_has_profile();
  if (profile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profile_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Report.Node.profile)
  return profile_;
}
inline ::std::string* Node::release_profile() {
  clear_has_profile();
  if (profile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = profile_;
    profile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Node::set_allocated_profile(::std::string* profile) {
  if (profile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete profile_;
  }
  if (profile) {
    set_has_profile();
    profile_ = profile;
  } else {
    clear_has_profile();
    profile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Report.Node.profile)
}

// optional uint32 parser_num = 3;
inline bool Node::has_parser_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Node::set_has_parser_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Node::clear_has_parser_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Node::clear_parser_num() {
  parser_num_ = 0u;
  clear_has_parser_num();
}
inline ::google::protobuf::uint32 Node::parser_num() const {
  // @@protoc_insertion_point(field_get:Report.Node.parser_num)
  return parser_num_;
}
inline void Node::set_parser_num(::google::protobuf::uint32 value) {
  set_has_parser_num();
  parser_num_ = value;
  // @@protoc_insertion_point(field_set:Report.Node.parser_num)
}

// optional uint32 parser_busy = 4;
inline bool Node::has_parser_busy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Node::set_has_parser_busy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Node::clear_has_parser_busy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Node::clear_parser_busy() {
  parser_busy_ = 0u;
  clear_has_parser_busy();
}
inline ::google::protobuf::uint32 Node::parser_busy() const {
  // @@protoc_insertion_point(field_get:Report.Node.parser_busy)
  return parser_busy_;
}
inline void Node::set_parser_busy(::google::protobuf::uint32 value) {
  set_has_parser_busy();
  parser_busy_ = value;
  // @@protoc_insertion_point(field_set:Report.Node.parser_busy)
}

// optional uint32 parser_free = 5;
inline bool Node::has_parser_free() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Node::set_has_parser_free() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Node::clear_has_parser_free() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Node::clear_parser_free() {
  parser_free_ = 0u;
  clear_has_parser_free();
}
inline ::google::protobuf::uint32 Node::parser_free() const {
  // @@protoc_insertion_point(field_get:Report.Node.parser_free)
  return parser_free_;
}
inline void Node::set_parser_free(::google::protobuf::uint32 value) {
  set_has_parser_free();
  parser_free_ = value;
  // @@protoc_insertion_point(field_set:Report.Node.parser_free)
}

// optional .Report.FzReader reader = 6;
inline bool Node::has_reader() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Node::set_has_reader() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Node::clear_has_reader() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Node::clear_reader() {
  if (reader_ != NULL) reader_->::Report::FzReader::Clear();
  clear_has_reader();
}
inline const ::Report::FzReader& Node::reader() const {
  // @@protoc_insertion_point(field_get:Report.Node.reader)
  return reader_ != NULL ? *reader_ : *default_instance_->reader_;
}
inline ::Report::FzReader* Node::mutable_reader() {
  set_has_reader();
  if (reader_ == NULL) reader_ = new ::Report::FzReader;
  // @@protoc_insertion_point(field_mutable:Report.Node.reader)
  return reader_;
}
inline ::Report::FzReader* Node::release_reader() {
  clear_has_reader();
  ::Report::FzReader* temp = reader_;
  reader_ = NULL;
  return temp;
}
inline void Node::set_allocated_reader(::Report::FzReader* reader) {
  delete reader_;
  reader_ = reader;
  if (reader) {
    set_has_reader();
  } else {
    clear_has_reader();
  }
  // @@protoc_insertion_point(field_set_allocated:Report.Node.reader)
}

// repeated .Report.FzParser parser = 7;
inline int Node::parser_size() const {
  return parser_.size();
}
inline void Node::clear_parser() {
  parser_.Clear();
}
inline const ::Report::FzParser& Node::parser(int index) const {
  // @@protoc_insertion_point(field_get:Report.Node.parser)
  return parser_.Get(index);
}
inline ::Report::FzParser* Node::mutable_parser(int index) {
  // @@protoc_insertion_point(field_mutable:Report.Node.parser)
  return parser_.Mutable(index);
}
inline ::Report::FzParser* Node::add_parser() {
  // @@protoc_insertion_point(field_add:Report.Node.parser)
  return parser_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Report::FzParser >&
Node::parser() const {
  // @@protoc_insertion_point(field_list:Report.Node.parser)
  return parser_;
}
inline ::google::protobuf::RepeatedPtrField< ::Report::FzParser >*
Node::mutable_parser() {
  // @@protoc_insertion_point(field_mutable_list:Report.Node.parser)
  return &parser_;
}

// repeated .Report.FzFSM fsm = 8;
inline int Node::fsm_size() const {
  return fsm_.size();
}
inline void Node::clear_fsm() {
  fsm_.Clear();
}
inline const ::Report::FzFSM& Node::fsm(int index) const {
  // @@protoc_insertion_point(field_get:Report.Node.fsm)
  return fsm_.Get(index);
}
inline ::Report::FzFSM* Node::mutable_fsm(int index) {
  // @@protoc_insertion_point(field_mutable:Report.Node.fsm)
  return fsm_.Mutable(index);
}
inline ::Report::FzFSM* Node::add_fsm() {
  // @@protoc_insertion_point(field_add:Report.Node.fsm)
  return fsm_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Report::FzFSM >&
Node::fsm() const {
  // @@protoc_insertion_point(field_list:Report.Node.fsm)
  return fsm_;
}
inline ::google::protobuf::RepeatedPtrField< ::Report::FzFSM >*
Node::mutable_fsm() {
  // @@protoc_insertion_point(field_mutable_list:Report.Node.fsm)
  return &fsm_;
}

// optional .Report.FzWriter writer = 9;
inline bool Node::has_writer() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Node::set_has_writer() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Node::clear_has_writer() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Node::clear_writer() {
  if (writer_ != NULL) writer_->::Report::FzWriter::Clear();
  clear_has_writer();
}
inline const ::Report::FzWriter& Node::writer() const {
  // @@protoc_insertion_point(field_get:Report.Node.writer)
  return writer_ != NULL ? *writer_ : *default_instance_->writer_;
}
inline ::Report::FzWriter* Node::mutable_writer() {
  set_has_writer();
  if (writer_ == NULL) writer_ = new ::Report::FzWriter;
  // @@protoc_insertion_point(field_mutable:Report.Node.writer)
  return writer_;
}
inline ::Report::FzWriter* Node::release_writer() {
  clear_has_writer();
  ::Report::FzWriter* temp = writer_;
  writer_ = NULL;
  return temp;
}
inline void Node::set_allocated_writer(::Report::FzWriter* writer) {
  delete writer_;
  writer_ = writer;
  if (writer) {
    set_has_writer();
  } else {
    clear_has_writer();
  }
  // @@protoc_insertion_point(field_set_allocated:Report.Node.writer)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Report

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FzNodeReport_2eproto__INCLUDED
