##################################################
# file: ecc_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py -s ecc.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# urn:ecc
##############################

class urn_ecc:
    targetNamespace = "urn:ecc"

    class ServerExit(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ServerExit"
        schema = "urn:ecc"
        def __init__(self, **kw):
            ns = urn_ecc.ServerExit.schema
            TClist = []
            kw["pname"] = ("urn:ecc","ServerExit")
            kw["aname"] = "ServerExit"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ServerExit_Holder"
            self.pyclass = Holder

    class Response(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Response"
        schema = "urn:ecc"
        def __init__(self, **kw):
            ns = urn_ecc.Response.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"ErrorCode"), aname="ErrorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ErrorMessage"), aname="ErrorMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ecc","Response")
            kw["aname"] = "Response"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.ErrorCode = None
                    self.ErrorMessage = None
                    return
            Holder.__name__ = "Response_Holder"
            self.pyclass = Holder

    class GetConfigIDs(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetConfigIDs"
        schema = "urn:ecc"
        def __init__(self, **kw):
            ns = urn_ecc.GetConfigIDs.schema
            TClist = []
            kw["pname"] = ("urn:ecc","GetConfigIDs")
            kw["aname"] = "GetConfigIDs"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "GetConfigIDs_Holder"
            self.pyclass = Holder

    class ResponseText(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ResponseText"
        schema = "urn:ecc"
        def __init__(self, **kw):
            ns = urn_ecc.ResponseText.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"ErrorCode"), aname="ErrorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ErrorMessage"), aname="ErrorMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Text"), aname="Text", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ecc","ResponseText")
            kw["aname"] = "ResponseText"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.ErrorCode = None
                    self.ErrorMessage = None
                    self.Text = None
                    return
            Holder.__name__ = "ResponseText_Holder"
            self.pyclass = Holder

    class Describe(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Describe"
        schema = "urn:ecc"
        def __init__(self, **kw):
            ns = urn_ecc.Describe.schema
            TClist = [ZSI.TC.String(pname=(ns,"configID"), aname="configID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"table"), aname="table", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ecc","Describe")
            kw["aname"] = "Describe"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.configID = None
                    self.table = None
                    return
            Holder.__name__ = "Describe_Holder"
            self.pyclass = Holder

    class Prepare(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Prepare"
        schema = "urn:ecc"
        def __init__(self, **kw):
            ns = urn_ecc.Prepare.schema
            TClist = [ZSI.TC.String(pname=(ns,"configID"), aname="configID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"table"), aname="table", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ecc","Prepare")
            kw["aname"] = "Prepare"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.configID = None
                    self.table = None
                    return
            Holder.__name__ = "Prepare_Holder"
            self.pyclass = Holder

    class Configure(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Configure"
        schema = "urn:ecc"
        def __init__(self, **kw):
            ns = urn_ecc.Configure.schema
            TClist = [ZSI.TC.String(pname=(ns,"configID"), aname="configID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"table"), aname="table", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ecc","Configure")
            kw["aname"] = "Configure"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.configID = None
                    self.table = None
                    return
            Holder.__name__ = "Configure_Holder"
            self.pyclass = Holder

    class Start(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Start"
        schema = "urn:ecc"
        def __init__(self, **kw):
            ns = urn_ecc.Start.schema
            TClist = [ZSI.TC.String(pname=(ns,"configID"), aname="configID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"table"), aname="table", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ecc","Start")
            kw["aname"] = "Start"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.configID = None
                    self.table = None
                    return
            Holder.__name__ = "Start_Holder"
            self.pyclass = Holder

    class Stop(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Stop"
        schema = "urn:ecc"
        def __init__(self, **kw):
            ns = urn_ecc.Stop.schema
            TClist = [ZSI.TC.String(pname=(ns,"configID"), aname="configID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"table"), aname="table", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ecc","Stop")
            kw["aname"] = "Stop"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.configID = None
                    self.table = None
                    return
            Holder.__name__ = "Stop_Holder"
            self.pyclass = Holder

    class Pause(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Pause"
        schema = "urn:ecc"
        def __init__(self, **kw):
            ns = urn_ecc.Pause.schema
            TClist = [ZSI.TC.String(pname=(ns,"configID"), aname="configID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"table"), aname="table", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ecc","Pause")
            kw["aname"] = "Pause"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.configID = None
                    self.table = None
                    return
            Holder.__name__ = "Pause_Holder"
            self.pyclass = Holder

    class Resume(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Resume"
        schema = "urn:ecc"
        def __init__(self, **kw):
            ns = urn_ecc.Resume.schema
            TClist = [ZSI.TC.String(pname=(ns,"configID"), aname="configID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"table"), aname="table", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ecc","Resume")
            kw["aname"] = "Resume"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.configID = None
                    self.table = None
                    return
            Holder.__name__ = "Resume_Holder"
            self.pyclass = Holder

    class Breakup(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Breakup"
        schema = "urn:ecc"
        def __init__(self, **kw):
            ns = urn_ecc.Breakup.schema
            TClist = [ZSI.TC.String(pname=(ns,"configID"), aname="configID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"table"), aname="table", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ecc","Breakup")
            kw["aname"] = "Breakup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.configID = None
                    self.table = None
                    return
            Holder.__name__ = "Breakup_Holder"
            self.pyclass = Holder

    class Undo(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Undo"
        schema = "urn:ecc"
        def __init__(self, **kw):
            ns = urn_ecc.Undo.schema
            TClist = [ZSI.TC.String(pname=(ns,"configID"), aname="configID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"table"), aname="table", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ecc","Undo")
            kw["aname"] = "Undo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.configID = None
                    self.table = None
                    return
            Holder.__name__ = "Undo_Holder"
            self.pyclass = Holder

    class GetState(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetState"
        schema = "urn:ecc"
        def __init__(self, **kw):
            ns = urn_ecc.GetState.schema
            TClist = []
            kw["pname"] = ("urn:ecc","GetState")
            kw["aname"] = "GetState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "GetState_Holder"
            self.pyclass = Holder

    class ResponseState(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ResponseState"
        schema = "urn:ecc"
        def __init__(self, **kw):
            ns = urn_ecc.ResponseState.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"ErrorCode"), aname="ErrorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ErrorMessage"), aname="ErrorMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"State"), aname="State", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Transition"), aname="Transition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ecc","ResponseState")
            kw["aname"] = "ResponseState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.ErrorCode = None
                    self.ErrorMessage = None
                    self.State = None
                    self.Transition = None
                    return
            Holder.__name__ = "ResponseState_Holder"
            self.pyclass = Holder

    class Special(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Special"
        schema = "urn:ecc"
        def __init__(self, **kw):
            ns = urn_ecc.Special.schema
            TClist = [ZSI.TC.String(pname=(ns,"command"), aname="command", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"table"), aname="table", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ecc","Special")
            kw["aname"] = "Special"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.command = None
                    self.table = None
                    return
            Holder.__name__ = "Special_Holder"
            self.pyclass = Holder

# end class urn_ecc (tns: urn:ecc)
