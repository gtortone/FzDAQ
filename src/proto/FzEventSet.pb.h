// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/proto/FzEventSet.proto

#ifndef PROTOBUF_src_2fproto_2fFzEventSet_2eproto__INCLUDED
#define PROTOBUF_src_2fproto_2fFzEventSet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace DAQ {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_src_2fproto_2fFzEventSet_2eproto();
void protobuf_AssignDesc_src_2fproto_2fFzEventSet_2eproto();
void protobuf_ShutdownFile_src_2fproto_2fFzEventSet_2eproto();

class Energy;
class Waveform;
class FzData;
class FzHit;
class FzFee;
class FzBlock;
class FzTrigInfo;
class FzEvent;
class FzEventSet;

enum FzData_FzDataType {
  FzData_FzDataType_QH1 = 0,
  FzData_FzDataType_I1 = 1,
  FzData_FzDataType_QL1 = 2,
  FzData_FzDataType_Q2 = 3,
  FzData_FzDataType_I2 = 4,
  FzData_FzDataType_Q3 = 5,
  FzData_FzDataType_ADC = 6,
  FzData_FzDataType_UNKDT = 7
};
bool FzData_FzDataType_IsValid(int value);
const FzData_FzDataType FzData_FzDataType_FzDataType_MIN = FzData_FzDataType_QH1;
const FzData_FzDataType FzData_FzDataType_FzDataType_MAX = FzData_FzDataType_UNKDT;
const int FzData_FzDataType_FzDataType_ARRAYSIZE = FzData_FzDataType_FzDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FzData_FzDataType_descriptor();
inline const ::std::string& FzData_FzDataType_Name(FzData_FzDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FzData_FzDataType_descriptor(), value);
}
inline bool FzData_FzDataType_Parse(
    const ::std::string& name, FzData_FzDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FzData_FzDataType>(
    FzData_FzDataType_descriptor(), name, value);
}
enum FzHit_FzFec {
  FzHit_FzFec_FEC0 = 0,
  FzHit_FzFec_FEC1 = 1,
  FzHit_FzFec_FEC2 = 2,
  FzHit_FzFec_FEC3 = 3,
  FzHit_FzFec_FEC4 = 4,
  FzHit_FzFec_FEC5 = 5,
  FzHit_FzFec_FEC6 = 6,
  FzHit_FzFec_FEC7 = 7,
  FzHit_FzFec_ADCF = 15,
  FzHit_FzFec_UNKFEC = 16
};
bool FzHit_FzFec_IsValid(int value);
const FzHit_FzFec FzHit_FzFec_FzFec_MIN = FzHit_FzFec_FEC0;
const FzHit_FzFec FzHit_FzFec_FzFec_MAX = FzHit_FzFec_UNKFEC;
const int FzHit_FzFec_FzFec_ARRAYSIZE = FzHit_FzFec_FzFec_MAX + 1;

const ::google::protobuf::EnumDescriptor* FzHit_FzFec_descriptor();
inline const ::std::string& FzHit_FzFec_Name(FzHit_FzFec value) {
  return ::google::protobuf::internal::NameOfEnum(
    FzHit_FzFec_descriptor(), value);
}
inline bool FzHit_FzFec_Parse(
    const ::std::string& name, FzHit_FzFec* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FzHit_FzFec>(
    FzHit_FzFec_descriptor(), name, value);
}
enum FzHit_FzTelescope {
  FzHit_FzTelescope_A = 0,
  FzHit_FzTelescope_B = 1,
  FzHit_FzTelescope_UNKT = 2
};
bool FzHit_FzTelescope_IsValid(int value);
const FzHit_FzTelescope FzHit_FzTelescope_FzTelescope_MIN = FzHit_FzTelescope_A;
const FzHit_FzTelescope FzHit_FzTelescope_FzTelescope_MAX = FzHit_FzTelescope_UNKT;
const int FzHit_FzTelescope_FzTelescope_ARRAYSIZE = FzHit_FzTelescope_FzTelescope_MAX + 1;

const ::google::protobuf::EnumDescriptor* FzHit_FzTelescope_descriptor();
inline const ::std::string& FzHit_FzTelescope_Name(FzHit_FzTelescope value) {
  return ::google::protobuf::internal::NameOfEnum(
    FzHit_FzTelescope_descriptor(), value);
}
inline bool FzHit_FzTelescope_Parse(
    const ::std::string& name, FzHit_FzTelescope* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FzHit_FzTelescope>(
    FzHit_FzTelescope_descriptor(), name, value);
}
enum FzHit_FzDetector {
  FzHit_FzDetector_Si1 = 0,
  FzHit_FzDetector_Si2 = 1,
  FzHit_FzDetector_CsI = 2,
  FzHit_FzDetector_UNKD = 3
};
bool FzHit_FzDetector_IsValid(int value);
const FzHit_FzDetector FzHit_FzDetector_FzDetector_MIN = FzHit_FzDetector_Si1;
const FzHit_FzDetector FzHit_FzDetector_FzDetector_MAX = FzHit_FzDetector_UNKD;
const int FzHit_FzDetector_FzDetector_ARRAYSIZE = FzHit_FzDetector_FzDetector_MAX + 1;

const ::google::protobuf::EnumDescriptor* FzHit_FzDetector_descriptor();
inline const ::std::string& FzHit_FzDetector_Name(FzHit_FzDetector value) {
  return ::google::protobuf::internal::NameOfEnum(
    FzHit_FzDetector_descriptor(), value);
}
inline bool FzHit_FzDetector_Parse(
    const ::std::string& name, FzHit_FzDetector* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FzHit_FzDetector>(
    FzHit_FzDetector_descriptor(), name, value);
}
enum FzFee_FzFec {
  FzFee_FzFec_FEC0 = 0,
  FzFee_FzFec_FEC1 = 1,
  FzFee_FzFec_FEC2 = 2,
  FzFee_FzFec_FEC3 = 3,
  FzFee_FzFec_FEC4 = 4,
  FzFee_FzFec_FEC5 = 5,
  FzFee_FzFec_FEC6 = 6,
  FzFee_FzFec_FEC7 = 7,
  FzFee_FzFec_ADCF = 15,
  FzFee_FzFec_UNKFEC = 16
};
bool FzFee_FzFec_IsValid(int value);
const FzFee_FzFec FzFee_FzFec_FzFec_MIN = FzFee_FzFec_FEC0;
const FzFee_FzFec FzFee_FzFec_FzFec_MAX = FzFee_FzFec_UNKFEC;
const int FzFee_FzFec_FzFec_ARRAYSIZE = FzFee_FzFec_FzFec_MAX + 1;

const ::google::protobuf::EnumDescriptor* FzFee_FzFec_descriptor();
inline const ::std::string& FzFee_FzFec_Name(FzFee_FzFec value) {
  return ::google::protobuf::internal::NameOfEnum(
    FzFee_FzFec_descriptor(), value);
}
inline bool FzFee_FzFec_Parse(
    const ::std::string& name, FzFee_FzFec* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FzFee_FzFec>(
    FzFee_FzFec_descriptor(), name, value);
}
// ===================================================================

class Energy : public ::google::protobuf::Message {
 public:
  Energy();
  virtual ~Energy();

  Energy(const Energy& from);

  inline Energy& operator=(const Energy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Energy& default_instance();

  void Swap(Energy* other);

  // implements Message ----------------------------------------------

  Energy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Energy& from);
  void MergeFrom(const Energy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::uint32 value(int index) const;
  inline void set_value(int index, ::google::protobuf::uint32 value);
  inline void add_value(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_value();

  // required bool len_error = 2;
  inline bool has_len_error() const;
  inline void clear_len_error();
  static const int kLenErrorFieldNumber = 2;
  inline bool len_error() const;
  inline void set_len_error(bool value);

  // @@protoc_insertion_point(class_scope:DAQ.Energy)
 private:
  inline void set_has_len_error();
  inline void clear_has_len_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > value_;
  bool len_error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_src_2fproto_2fFzEventSet_2eproto();
  friend void protobuf_AssignDesc_src_2fproto_2fFzEventSet_2eproto();
  friend void protobuf_ShutdownFile_src_2fproto_2fFzEventSet_2eproto();

  void InitAsDefaultInstance();
  static Energy* default_instance_;
};
// -------------------------------------------------------------------

class Waveform : public ::google::protobuf::Message {
 public:
  Waveform();
  virtual ~Waveform();

  Waveform(const Waveform& from);

  inline Waveform& operator=(const Waveform& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Waveform& default_instance();

  void Swap(Waveform* other);

  // implements Message ----------------------------------------------

  Waveform* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Waveform& from);
  void MergeFrom(const Waveform& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pretrig = 1;
  inline bool has_pretrig() const;
  inline void clear_pretrig();
  static const int kPretrigFieldNumber = 1;
  inline ::google::protobuf::uint32 pretrig() const;
  inline void set_pretrig(::google::protobuf::uint32 value);

  // repeated int32 sample = 2 [packed = true];
  inline int sample_size() const;
  inline void clear_sample();
  static const int kSampleFieldNumber = 2;
  inline ::google::protobuf::int32 sample(int index) const;
  inline void set_sample(int index, ::google::protobuf::int32 value);
  inline void add_sample(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sample() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sample();

  // required bool len_error = 3;
  inline bool has_len_error() const;
  inline void clear_len_error();
  static const int kLenErrorFieldNumber = 3;
  inline bool len_error() const;
  inline void set_len_error(bool value);

  // @@protoc_insertion_point(class_scope:DAQ.Waveform)
 private:
  inline void set_has_pretrig();
  inline void clear_has_pretrig();
  inline void set_has_len_error();
  inline void clear_has_len_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sample_;
  mutable int _sample_cached_byte_size_;
  ::google::protobuf::uint32 pretrig_;
  bool len_error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_src_2fproto_2fFzEventSet_2eproto();
  friend void protobuf_AssignDesc_src_2fproto_2fFzEventSet_2eproto();
  friend void protobuf_ShutdownFile_src_2fproto_2fFzEventSet_2eproto();

  void InitAsDefaultInstance();
  static Waveform* default_instance_;
};
// -------------------------------------------------------------------

class FzData : public ::google::protobuf::Message {
 public:
  FzData();
  virtual ~FzData();

  FzData(const FzData& from);

  inline FzData& operator=(const FzData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FzData& default_instance();

  void Swap(FzData* other);

  // implements Message ----------------------------------------------

  FzData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FzData& from);
  void MergeFrom(const FzData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FzData_FzDataType FzDataType;
  static const FzDataType QH1 = FzData_FzDataType_QH1;
  static const FzDataType I1 = FzData_FzDataType_I1;
  static const FzDataType QL1 = FzData_FzDataType_QL1;
  static const FzDataType Q2 = FzData_FzDataType_Q2;
  static const FzDataType I2 = FzData_FzDataType_I2;
  static const FzDataType Q3 = FzData_FzDataType_Q3;
  static const FzDataType ADC = FzData_FzDataType_ADC;
  static const FzDataType UNKDT = FzData_FzDataType_UNKDT;
  static inline bool FzDataType_IsValid(int value) {
    return FzData_FzDataType_IsValid(value);
  }
  static const FzDataType FzDataType_MIN =
    FzData_FzDataType_FzDataType_MIN;
  static const FzDataType FzDataType_MAX =
    FzData_FzDataType_FzDataType_MAX;
  static const int FzDataType_ARRAYSIZE =
    FzData_FzDataType_FzDataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FzDataType_descriptor() {
    return FzData_FzDataType_descriptor();
  }
  static inline const ::std::string& FzDataType_Name(FzDataType value) {
    return FzData_FzDataType_Name(value);
  }
  static inline bool FzDataType_Parse(const ::std::string& name,
      FzDataType* value) {
    return FzData_FzDataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .DAQ.FzData.FzDataType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::DAQ::FzData_FzDataType type() const;
  inline void set_type(::DAQ::FzData_FzDataType value);

  // optional .DAQ.Energy energy = 2;
  inline bool has_energy() const;
  inline void clear_energy();
  static const int kEnergyFieldNumber = 2;
  inline const ::DAQ::Energy& energy() const;
  inline ::DAQ::Energy* mutable_energy();
  inline ::DAQ::Energy* release_energy();
  inline void set_allocated_energy(::DAQ::Energy* energy);

  // optional .DAQ.Waveform waveform = 3;
  inline bool has_waveform() const;
  inline void clear_waveform();
  static const int kWaveformFieldNumber = 3;
  inline const ::DAQ::Waveform& waveform() const;
  inline ::DAQ::Waveform* mutable_waveform();
  inline ::DAQ::Waveform* release_waveform();
  inline void set_allocated_waveform(::DAQ::Waveform* waveform);

  // @@protoc_insertion_point(class_scope:DAQ.FzData)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_energy();
  inline void clear_has_energy();
  inline void set_has_waveform();
  inline void clear_has_waveform();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::DAQ::Energy* energy_;
  ::DAQ::Waveform* waveform_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_src_2fproto_2fFzEventSet_2eproto();
  friend void protobuf_AssignDesc_src_2fproto_2fFzEventSet_2eproto();
  friend void protobuf_ShutdownFile_src_2fproto_2fFzEventSet_2eproto();

  void InitAsDefaultInstance();
  static FzData* default_instance_;
};
// -------------------------------------------------------------------

class FzHit : public ::google::protobuf::Message {
 public:
  FzHit();
  virtual ~FzHit();

  FzHit(const FzHit& from);

  inline FzHit& operator=(const FzHit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FzHit& default_instance();

  void Swap(FzHit* other);

  // implements Message ----------------------------------------------

  FzHit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FzHit& from);
  void MergeFrom(const FzHit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FzHit_FzFec FzFec;
  static const FzFec FEC0 = FzHit_FzFec_FEC0;
  static const FzFec FEC1 = FzHit_FzFec_FEC1;
  static const FzFec FEC2 = FzHit_FzFec_FEC2;
  static const FzFec FEC3 = FzHit_FzFec_FEC3;
  static const FzFec FEC4 = FzHit_FzFec_FEC4;
  static const FzFec FEC5 = FzHit_FzFec_FEC5;
  static const FzFec FEC6 = FzHit_FzFec_FEC6;
  static const FzFec FEC7 = FzHit_FzFec_FEC7;
  static const FzFec ADCF = FzHit_FzFec_ADCF;
  static const FzFec UNKFEC = FzHit_FzFec_UNKFEC;
  static inline bool FzFec_IsValid(int value) {
    return FzHit_FzFec_IsValid(value);
  }
  static const FzFec FzFec_MIN =
    FzHit_FzFec_FzFec_MIN;
  static const FzFec FzFec_MAX =
    FzHit_FzFec_FzFec_MAX;
  static const int FzFec_ARRAYSIZE =
    FzHit_FzFec_FzFec_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FzFec_descriptor() {
    return FzHit_FzFec_descriptor();
  }
  static inline const ::std::string& FzFec_Name(FzFec value) {
    return FzHit_FzFec_Name(value);
  }
  static inline bool FzFec_Parse(const ::std::string& name,
      FzFec* value) {
    return FzHit_FzFec_Parse(name, value);
  }

  typedef FzHit_FzTelescope FzTelescope;
  static const FzTelescope A = FzHit_FzTelescope_A;
  static const FzTelescope B = FzHit_FzTelescope_B;
  static const FzTelescope UNKT = FzHit_FzTelescope_UNKT;
  static inline bool FzTelescope_IsValid(int value) {
    return FzHit_FzTelescope_IsValid(value);
  }
  static const FzTelescope FzTelescope_MIN =
    FzHit_FzTelescope_FzTelescope_MIN;
  static const FzTelescope FzTelescope_MAX =
    FzHit_FzTelescope_FzTelescope_MAX;
  static const int FzTelescope_ARRAYSIZE =
    FzHit_FzTelescope_FzTelescope_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FzTelescope_descriptor() {
    return FzHit_FzTelescope_descriptor();
  }
  static inline const ::std::string& FzTelescope_Name(FzTelescope value) {
    return FzHit_FzTelescope_Name(value);
  }
  static inline bool FzTelescope_Parse(const ::std::string& name,
      FzTelescope* value) {
    return FzHit_FzTelescope_Parse(name, value);
  }

  typedef FzHit_FzDetector FzDetector;
  static const FzDetector Si1 = FzHit_FzDetector_Si1;
  static const FzDetector Si2 = FzHit_FzDetector_Si2;
  static const FzDetector CsI = FzHit_FzDetector_CsI;
  static const FzDetector UNKD = FzHit_FzDetector_UNKD;
  static inline bool FzDetector_IsValid(int value) {
    return FzHit_FzDetector_IsValid(value);
  }
  static const FzDetector FzDetector_MIN =
    FzHit_FzDetector_FzDetector_MIN;
  static const FzDetector FzDetector_MAX =
    FzHit_FzDetector_FzDetector_MAX;
  static const int FzDetector_ARRAYSIZE =
    FzHit_FzDetector_FzDetector_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FzDetector_descriptor() {
    return FzHit_FzDetector_descriptor();
  }
  static inline const ::std::string& FzDetector_Name(FzDetector value) {
    return FzHit_FzDetector_Name(value);
  }
  static inline bool FzDetector_Parse(const ::std::string& name,
      FzDetector* value) {
    return FzHit_FzDetector_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 ec = 1;
  inline bool has_ec() const;
  inline void clear_ec();
  static const int kEcFieldNumber = 1;
  inline ::google::protobuf::uint32 ec() const;
  inline void set_ec(::google::protobuf::uint32 value);

  // required .DAQ.FzHit.FzTelescope telid = 2;
  inline bool has_telid() const;
  inline void clear_telid();
  static const int kTelidFieldNumber = 2;
  inline ::DAQ::FzHit_FzTelescope telid() const;
  inline void set_telid(::DAQ::FzHit_FzTelescope value);

  // required .DAQ.FzHit.FzDetector detid = 3;
  inline bool has_detid() const;
  inline void clear_detid();
  static const int kDetidFieldNumber = 3;
  inline ::DAQ::FzHit_FzDetector detid() const;
  inline void set_detid(::DAQ::FzHit_FzDetector value);

  // required .DAQ.FzHit.FzFec feeid = 4;
  inline bool has_feeid() const;
  inline void clear_feeid();
  static const int kFeeidFieldNumber = 4;
  inline ::DAQ::FzHit_FzFec feeid() const;
  inline void set_feeid(::DAQ::FzHit_FzFec value);

  // required uint32 gttag = 5;
  inline bool has_gttag() const;
  inline void clear_gttag();
  static const int kGttagFieldNumber = 5;
  inline ::google::protobuf::uint32 gttag() const;
  inline void set_gttag(::google::protobuf::uint32 value);

  // required uint32 dettag = 6;
  inline bool has_dettag() const;
  inline void clear_dettag();
  static const int kDettagFieldNumber = 6;
  inline ::google::protobuf::uint32 dettag() const;
  inline void set_dettag(::google::protobuf::uint32 value);

  // repeated .DAQ.FzData data = 7;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 7;
  inline const ::DAQ::FzData& data(int index) const;
  inline ::DAQ::FzData* mutable_data(int index);
  inline ::DAQ::FzData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::DAQ::FzData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::DAQ::FzData >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:DAQ.FzHit)
 private:
  inline void set_has_ec();
  inline void clear_has_ec();
  inline void set_has_telid();
  inline void clear_has_telid();
  inline void set_has_detid();
  inline void clear_has_detid();
  inline void set_has_feeid();
  inline void clear_has_feeid();
  inline void set_has_gttag();
  inline void clear_has_gttag();
  inline void set_has_dettag();
  inline void clear_has_dettag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ec_;
  int telid_;
  int detid_;
  int feeid_;
  ::google::protobuf::uint32 gttag_;
  ::google::protobuf::uint32 dettag_;
  ::google::protobuf::RepeatedPtrField< ::DAQ::FzData > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_src_2fproto_2fFzEventSet_2eproto();
  friend void protobuf_AssignDesc_src_2fproto_2fFzEventSet_2eproto();
  friend void protobuf_ShutdownFile_src_2fproto_2fFzEventSet_2eproto();

  void InitAsDefaultInstance();
  static FzHit* default_instance_;
};
// -------------------------------------------------------------------

class FzFee : public ::google::protobuf::Message {
 public:
  FzFee();
  virtual ~FzFee();

  FzFee(const FzFee& from);

  inline FzFee& operator=(const FzFee& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FzFee& default_instance();

  void Swap(FzFee* other);

  // implements Message ----------------------------------------------

  FzFee* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FzFee& from);
  void MergeFrom(const FzFee& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FzFee_FzFec FzFec;
  static const FzFec FEC0 = FzFee_FzFec_FEC0;
  static const FzFec FEC1 = FzFee_FzFec_FEC1;
  static const FzFec FEC2 = FzFee_FzFec_FEC2;
  static const FzFec FEC3 = FzFee_FzFec_FEC3;
  static const FzFec FEC4 = FzFee_FzFec_FEC4;
  static const FzFec FEC5 = FzFee_FzFec_FEC5;
  static const FzFec FEC6 = FzFee_FzFec_FEC6;
  static const FzFec FEC7 = FzFee_FzFec_FEC7;
  static const FzFec ADCF = FzFee_FzFec_ADCF;
  static const FzFec UNKFEC = FzFee_FzFec_UNKFEC;
  static inline bool FzFec_IsValid(int value) {
    return FzFee_FzFec_IsValid(value);
  }
  static const FzFec FzFec_MIN =
    FzFee_FzFec_FzFec_MIN;
  static const FzFec FzFec_MAX =
    FzFee_FzFec_FzFec_MAX;
  static const int FzFec_ARRAYSIZE =
    FzFee_FzFec_FzFec_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FzFec_descriptor() {
    return FzFee_FzFec_descriptor();
  }
  static inline const ::std::string& FzFec_Name(FzFec value) {
    return FzFee_FzFec_Name(value);
  }
  static inline bool FzFec_Parse(const ::std::string& name,
      FzFec* value) {
    return FzFee_FzFec_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .DAQ.FzFee.FzFec feeid = 1;
  inline bool has_feeid() const;
  inline void clear_feeid();
  static const int kFeeidFieldNumber = 1;
  inline ::DAQ::FzFee_FzFec feeid() const;
  inline void set_feeid(::DAQ::FzFee_FzFec value);

  // repeated .DAQ.FzHit hit = 2;
  inline int hit_size() const;
  inline void clear_hit();
  static const int kHitFieldNumber = 2;
  inline const ::DAQ::FzHit& hit(int index) const;
  inline ::DAQ::FzHit* mutable_hit(int index);
  inline ::DAQ::FzHit* add_hit();
  inline const ::google::protobuf::RepeatedPtrField< ::DAQ::FzHit >&
      hit() const;
  inline ::google::protobuf::RepeatedPtrField< ::DAQ::FzHit >*
      mutable_hit();

  // required bool len_error = 3;
  inline bool has_len_error() const;
  inline void clear_len_error();
  static const int kLenErrorFieldNumber = 3;
  inline bool len_error() const;
  inline void set_len_error(bool value);

  // required bool crc_error = 4;
  inline bool has_crc_error() const;
  inline void clear_crc_error();
  static const int kCrcErrorFieldNumber = 4;
  inline bool crc_error() const;
  inline void set_crc_error(bool value);

  // @@protoc_insertion_point(class_scope:DAQ.FzFee)
 private:
  inline void set_has_feeid();
  inline void clear_has_feeid();
  inline void set_has_len_error();
  inline void clear_has_len_error();
  inline void set_has_crc_error();
  inline void clear_has_crc_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::DAQ::FzHit > hit_;
  int feeid_;
  bool len_error_;
  bool crc_error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_src_2fproto_2fFzEventSet_2eproto();
  friend void protobuf_AssignDesc_src_2fproto_2fFzEventSet_2eproto();
  friend void protobuf_ShutdownFile_src_2fproto_2fFzEventSet_2eproto();

  void InitAsDefaultInstance();
  static FzFee* default_instance_;
};
// -------------------------------------------------------------------

class FzBlock : public ::google::protobuf::Message {
 public:
  FzBlock();
  virtual ~FzBlock();

  FzBlock(const FzBlock& from);

  inline FzBlock& operator=(const FzBlock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FzBlock& default_instance();

  void Swap(FzBlock* other);

  // implements Message ----------------------------------------------

  FzBlock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FzBlock& from);
  void MergeFrom(const FzBlock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 blkid = 1;
  inline bool has_blkid() const;
  inline void clear_blkid();
  static const int kBlkidFieldNumber = 1;
  inline ::google::protobuf::uint32 blkid() const;
  inline void set_blkid(::google::protobuf::uint32 value);

  // repeated .DAQ.FzFee fee = 2;
  inline int fee_size() const;
  inline void clear_fee();
  static const int kFeeFieldNumber = 2;
  inline const ::DAQ::FzFee& fee(int index) const;
  inline ::DAQ::FzFee* mutable_fee(int index);
  inline ::DAQ::FzFee* add_fee();
  inline const ::google::protobuf::RepeatedPtrField< ::DAQ::FzFee >&
      fee() const;
  inline ::google::protobuf::RepeatedPtrField< ::DAQ::FzFee >*
      mutable_fee();

  // required bool len_error = 3;
  inline bool has_len_error() const;
  inline void clear_len_error();
  static const int kLenErrorFieldNumber = 3;
  inline bool len_error() const;
  inline void set_len_error(bool value);

  // required bool crc_error = 4;
  inline bool has_crc_error() const;
  inline void clear_crc_error();
  static const int kCrcErrorFieldNumber = 4;
  inline bool crc_error() const;
  inline void set_crc_error(bool value);

  // @@protoc_insertion_point(class_scope:DAQ.FzBlock)
 private:
  inline void set_has_blkid();
  inline void clear_has_blkid();
  inline void set_has_len_error();
  inline void clear_has_len_error();
  inline void set_has_crc_error();
  inline void clear_has_crc_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::DAQ::FzFee > fee_;
  ::google::protobuf::uint32 blkid_;
  bool len_error_;
  bool crc_error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_src_2fproto_2fFzEventSet_2eproto();
  friend void protobuf_AssignDesc_src_2fproto_2fFzEventSet_2eproto();
  friend void protobuf_ShutdownFile_src_2fproto_2fFzEventSet_2eproto();

  void InitAsDefaultInstance();
  static FzBlock* default_instance_;
};
// -------------------------------------------------------------------

class FzTrigInfo : public ::google::protobuf::Message {
 public:
  FzTrigInfo();
  virtual ~FzTrigInfo();

  FzTrigInfo(const FzTrigInfo& from);

  inline FzTrigInfo& operator=(const FzTrigInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FzTrigInfo& default_instance();

  void Swap(FzTrigInfo* other);

  // implements Message ----------------------------------------------

  FzTrigInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FzTrigInfo& from);
  void MergeFrom(const FzTrigInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string attr = 2;
  inline bool has_attr() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 2;
  inline const ::std::string& attr() const;
  inline void set_attr(const ::std::string& value);
  inline void set_attr(const char* value);
  inline void set_attr(const char* value, size_t size);
  inline ::std::string* mutable_attr();
  inline ::std::string* release_attr();
  inline void set_allocated_attr(::std::string* attr);

  // required uint64 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:DAQ.FzTrigInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_attr();
  inline void clear_has_attr();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* attr_;
  ::google::protobuf::uint64 value_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_src_2fproto_2fFzEventSet_2eproto();
  friend void protobuf_AssignDesc_src_2fproto_2fFzEventSet_2eproto();
  friend void protobuf_ShutdownFile_src_2fproto_2fFzEventSet_2eproto();

  void InitAsDefaultInstance();
  static FzTrigInfo* default_instance_;
};
// -------------------------------------------------------------------

class FzEvent : public ::google::protobuf::Message {
 public:
  FzEvent();
  virtual ~FzEvent();

  FzEvent(const FzEvent& from);

  inline FzEvent& operator=(const FzEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FzEvent& default_instance();

  void Swap(FzEvent* other);

  // implements Message ----------------------------------------------

  FzEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FzEvent& from);
  void MergeFrom(const FzEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ec = 1;
  inline bool has_ec() const;
  inline void clear_ec();
  static const int kEcFieldNumber = 1;
  inline ::google::protobuf::uint32 ec() const;
  inline void set_ec(::google::protobuf::uint32 value);

  // repeated .DAQ.FzBlock block = 2;
  inline int block_size() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 2;
  inline const ::DAQ::FzBlock& block(int index) const;
  inline ::DAQ::FzBlock* mutable_block(int index);
  inline ::DAQ::FzBlock* add_block();
  inline const ::google::protobuf::RepeatedPtrField< ::DAQ::FzBlock >&
      block() const;
  inline ::google::protobuf::RepeatedPtrField< ::DAQ::FzBlock >*
      mutable_block();

  // required uint32 regid = 3;
  inline bool has_regid() const;
  inline void clear_regid();
  static const int kRegidFieldNumber = 3;
  inline ::google::protobuf::uint32 regid() const;
  inline void set_regid(::google::protobuf::uint32 value);

  // repeated .DAQ.FzTrigInfo trinfo = 4;
  inline int trinfo_size() const;
  inline void clear_trinfo();
  static const int kTrinfoFieldNumber = 4;
  inline const ::DAQ::FzTrigInfo& trinfo(int index) const;
  inline ::DAQ::FzTrigInfo* mutable_trinfo(int index);
  inline ::DAQ::FzTrigInfo* add_trinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::DAQ::FzTrigInfo >&
      trinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::DAQ::FzTrigInfo >*
      mutable_trinfo();

  // @@protoc_insertion_point(class_scope:DAQ.FzEvent)
 private:
  inline void set_has_ec();
  inline void clear_has_ec();
  inline void set_has_regid();
  inline void clear_has_regid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::DAQ::FzBlock > block_;
  ::google::protobuf::uint32 ec_;
  ::google::protobuf::uint32 regid_;
  ::google::protobuf::RepeatedPtrField< ::DAQ::FzTrigInfo > trinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_src_2fproto_2fFzEventSet_2eproto();
  friend void protobuf_AssignDesc_src_2fproto_2fFzEventSet_2eproto();
  friend void protobuf_ShutdownFile_src_2fproto_2fFzEventSet_2eproto();

  void InitAsDefaultInstance();
  static FzEvent* default_instance_;
};
// -------------------------------------------------------------------

class FzEventSet : public ::google::protobuf::Message {
 public:
  FzEventSet();
  virtual ~FzEventSet();

  FzEventSet(const FzEventSet& from);

  inline FzEventSet& operator=(const FzEventSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FzEventSet& default_instance();

  void Swap(FzEventSet* other);

  // implements Message ----------------------------------------------

  FzEventSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FzEventSet& from);
  void MergeFrom(const FzEventSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DAQ.FzEvent ev = 1;
  inline int ev_size() const;
  inline void clear_ev();
  static const int kEvFieldNumber = 1;
  inline const ::DAQ::FzEvent& ev(int index) const;
  inline ::DAQ::FzEvent* mutable_ev(int index);
  inline ::DAQ::FzEvent* add_ev();
  inline const ::google::protobuf::RepeatedPtrField< ::DAQ::FzEvent >&
      ev() const;
  inline ::google::protobuf::RepeatedPtrField< ::DAQ::FzEvent >*
      mutable_ev();

  // @@protoc_insertion_point(class_scope:DAQ.FzEventSet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::DAQ::FzEvent > ev_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_src_2fproto_2fFzEventSet_2eproto();
  friend void protobuf_AssignDesc_src_2fproto_2fFzEventSet_2eproto();
  friend void protobuf_ShutdownFile_src_2fproto_2fFzEventSet_2eproto();

  void InitAsDefaultInstance();
  static FzEventSet* default_instance_;
};
// ===================================================================


// ===================================================================

// Energy

// repeated uint32 value = 1;
inline int Energy::value_size() const {
  return value_.size();
}
inline void Energy::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::uint32 Energy::value(int index) const {
  return value_.Get(index);
}
inline void Energy::set_value(int index, ::google::protobuf::uint32 value) {
  value_.Set(index, value);
}
inline void Energy::add_value(::google::protobuf::uint32 value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Energy::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Energy::mutable_value() {
  return &value_;
}

// required bool len_error = 2;
inline bool Energy::has_len_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Energy::set_has_len_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Energy::clear_has_len_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Energy::clear_len_error() {
  len_error_ = false;
  clear_has_len_error();
}
inline bool Energy::len_error() const {
  return len_error_;
}
inline void Energy::set_len_error(bool value) {
  set_has_len_error();
  len_error_ = value;
}

// -------------------------------------------------------------------

// Waveform

// required uint32 pretrig = 1;
inline bool Waveform::has_pretrig() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Waveform::set_has_pretrig() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Waveform::clear_has_pretrig() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Waveform::clear_pretrig() {
  pretrig_ = 0u;
  clear_has_pretrig();
}
inline ::google::protobuf::uint32 Waveform::pretrig() const {
  return pretrig_;
}
inline void Waveform::set_pretrig(::google::protobuf::uint32 value) {
  set_has_pretrig();
  pretrig_ = value;
}

// repeated int32 sample = 2 [packed = true];
inline int Waveform::sample_size() const {
  return sample_.size();
}
inline void Waveform::clear_sample() {
  sample_.Clear();
}
inline ::google::protobuf::int32 Waveform::sample(int index) const {
  return sample_.Get(index);
}
inline void Waveform::set_sample(int index, ::google::protobuf::int32 value) {
  sample_.Set(index, value);
}
inline void Waveform::add_sample(::google::protobuf::int32 value) {
  sample_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Waveform::sample() const {
  return sample_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Waveform::mutable_sample() {
  return &sample_;
}

// required bool len_error = 3;
inline bool Waveform::has_len_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Waveform::set_has_len_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Waveform::clear_has_len_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Waveform::clear_len_error() {
  len_error_ = false;
  clear_has_len_error();
}
inline bool Waveform::len_error() const {
  return len_error_;
}
inline void Waveform::set_len_error(bool value) {
  set_has_len_error();
  len_error_ = value;
}

// -------------------------------------------------------------------

// FzData

// required .DAQ.FzData.FzDataType type = 1;
inline bool FzData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FzData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FzData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FzData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::DAQ::FzData_FzDataType FzData::type() const {
  return static_cast< ::DAQ::FzData_FzDataType >(type_);
}
inline void FzData::set_type(::DAQ::FzData_FzDataType value) {
  //assert(::DAQ::FzData_FzDataType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .DAQ.Energy energy = 2;
inline bool FzData::has_energy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FzData::set_has_energy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FzData::clear_has_energy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FzData::clear_energy() {
  if (energy_ != NULL) energy_->::DAQ::Energy::Clear();
  clear_has_energy();
}
inline const ::DAQ::Energy& FzData::energy() const {
  return energy_ != NULL ? *energy_ : *default_instance_->energy_;
}
inline ::DAQ::Energy* FzData::mutable_energy() {
  set_has_energy();
  if (energy_ == NULL) energy_ = new ::DAQ::Energy;
  return energy_;
}
inline ::DAQ::Energy* FzData::release_energy() {
  clear_has_energy();
  ::DAQ::Energy* temp = energy_;
  energy_ = NULL;
  return temp;
}
inline void FzData::set_allocated_energy(::DAQ::Energy* energy) {
  delete energy_;
  energy_ = energy;
  if (energy) {
    set_has_energy();
  } else {
    clear_has_energy();
  }
}

// optional .DAQ.Waveform waveform = 3;
inline bool FzData::has_waveform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FzData::set_has_waveform() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FzData::clear_has_waveform() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FzData::clear_waveform() {
  if (waveform_ != NULL) waveform_->::DAQ::Waveform::Clear();
  clear_has_waveform();
}
inline const ::DAQ::Waveform& FzData::waveform() const {
  return waveform_ != NULL ? *waveform_ : *default_instance_->waveform_;
}
inline ::DAQ::Waveform* FzData::mutable_waveform() {
  set_has_waveform();
  if (waveform_ == NULL) waveform_ = new ::DAQ::Waveform;
  return waveform_;
}
inline ::DAQ::Waveform* FzData::release_waveform() {
  clear_has_waveform();
  ::DAQ::Waveform* temp = waveform_;
  waveform_ = NULL;
  return temp;
}
inline void FzData::set_allocated_waveform(::DAQ::Waveform* waveform) {
  delete waveform_;
  waveform_ = waveform;
  if (waveform) {
    set_has_waveform();
  } else {
    clear_has_waveform();
  }
}

// -------------------------------------------------------------------

// FzHit

// required uint32 ec = 1;
inline bool FzHit::has_ec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FzHit::set_has_ec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FzHit::clear_has_ec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FzHit::clear_ec() {
  ec_ = 0u;
  clear_has_ec();
}
inline ::google::protobuf::uint32 FzHit::ec() const {
  return ec_;
}
inline void FzHit::set_ec(::google::protobuf::uint32 value) {
  set_has_ec();
  ec_ = value;
}

// required .DAQ.FzHit.FzTelescope telid = 2;
inline bool FzHit::has_telid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FzHit::set_has_telid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FzHit::clear_has_telid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FzHit::clear_telid() {
  telid_ = 0;
  clear_has_telid();
}
inline ::DAQ::FzHit_FzTelescope FzHit::telid() const {
  return static_cast< ::DAQ::FzHit_FzTelescope >(telid_);
}
inline void FzHit::set_telid(::DAQ::FzHit_FzTelescope value) {
  //assert(::DAQ::FzHit_FzTelescope_IsValid(value));
  set_has_telid();
  telid_ = value;
}

// required .DAQ.FzHit.FzDetector detid = 3;
inline bool FzHit::has_detid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FzHit::set_has_detid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FzHit::clear_has_detid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FzHit::clear_detid() {
  detid_ = 0;
  clear_has_detid();
}
inline ::DAQ::FzHit_FzDetector FzHit::detid() const {
  return static_cast< ::DAQ::FzHit_FzDetector >(detid_);
}
inline void FzHit::set_detid(::DAQ::FzHit_FzDetector value) {
  //assert(::DAQ::FzHit_FzDetector_IsValid(value));
  set_has_detid();
  detid_ = value;
}

// required .DAQ.FzHit.FzFec feeid = 4;
inline bool FzHit::has_feeid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FzHit::set_has_feeid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FzHit::clear_has_feeid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FzHit::clear_feeid() {
  feeid_ = 0;
  clear_has_feeid();
}
inline ::DAQ::FzHit_FzFec FzHit::feeid() const {
  return static_cast< ::DAQ::FzHit_FzFec >(feeid_);
}
inline void FzHit::set_feeid(::DAQ::FzHit_FzFec value) {
  //assert(::DAQ::FzHit_FzFec_IsValid(value));
  set_has_feeid();
  feeid_ = value;
}

// required uint32 gttag = 5;
inline bool FzHit::has_gttag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FzHit::set_has_gttag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FzHit::clear_has_gttag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FzHit::clear_gttag() {
  gttag_ = 0u;
  clear_has_gttag();
}
inline ::google::protobuf::uint32 FzHit::gttag() const {
  return gttag_;
}
inline void FzHit::set_gttag(::google::protobuf::uint32 value) {
  set_has_gttag();
  gttag_ = value;
}

// required uint32 dettag = 6;
inline bool FzHit::has_dettag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FzHit::set_has_dettag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FzHit::clear_has_dettag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FzHit::clear_dettag() {
  dettag_ = 0u;
  clear_has_dettag();
}
inline ::google::protobuf::uint32 FzHit::dettag() const {
  return dettag_;
}
inline void FzHit::set_dettag(::google::protobuf::uint32 value) {
  set_has_dettag();
  dettag_ = value;
}

// repeated .DAQ.FzData data = 7;
inline int FzHit::data_size() const {
  return data_.size();
}
inline void FzHit::clear_data() {
  data_.Clear();
}
inline const ::DAQ::FzData& FzHit::data(int index) const {
  return data_.Get(index);
}
inline ::DAQ::FzData* FzHit::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::DAQ::FzData* FzHit::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DAQ::FzData >&
FzHit::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::DAQ::FzData >*
FzHit::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// FzFee

// required .DAQ.FzFee.FzFec feeid = 1;
inline bool FzFee::has_feeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FzFee::set_has_feeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FzFee::clear_has_feeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FzFee::clear_feeid() {
  feeid_ = 0;
  clear_has_feeid();
}
inline ::DAQ::FzFee_FzFec FzFee::feeid() const {
  return static_cast< ::DAQ::FzFee_FzFec >(feeid_);
}
inline void FzFee::set_feeid(::DAQ::FzFee_FzFec value) {
  //assert(::DAQ::FzFee_FzFec_IsValid(value));
  set_has_feeid();
  feeid_ = value;
}

// repeated .DAQ.FzHit hit = 2;
inline int FzFee::hit_size() const {
  return hit_.size();
}
inline void FzFee::clear_hit() {
  hit_.Clear();
}
inline const ::DAQ::FzHit& FzFee::hit(int index) const {
  return hit_.Get(index);
}
inline ::DAQ::FzHit* FzFee::mutable_hit(int index) {
  return hit_.Mutable(index);
}
inline ::DAQ::FzHit* FzFee::add_hit() {
  return hit_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DAQ::FzHit >&
FzFee::hit() const {
  return hit_;
}
inline ::google::protobuf::RepeatedPtrField< ::DAQ::FzHit >*
FzFee::mutable_hit() {
  return &hit_;
}

// required bool len_error = 3;
inline bool FzFee::has_len_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FzFee::set_has_len_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FzFee::clear_has_len_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FzFee::clear_len_error() {
  len_error_ = false;
  clear_has_len_error();
}
inline bool FzFee::len_error() const {
  return len_error_;
}
inline void FzFee::set_len_error(bool value) {
  set_has_len_error();
  len_error_ = value;
}

// required bool crc_error = 4;
inline bool FzFee::has_crc_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FzFee::set_has_crc_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FzFee::clear_has_crc_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FzFee::clear_crc_error() {
  crc_error_ = false;
  clear_has_crc_error();
}
inline bool FzFee::crc_error() const {
  return crc_error_;
}
inline void FzFee::set_crc_error(bool value) {
  set_has_crc_error();
  crc_error_ = value;
}

// -------------------------------------------------------------------

// FzBlock

// required uint32 blkid = 1;
inline bool FzBlock::has_blkid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FzBlock::set_has_blkid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FzBlock::clear_has_blkid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FzBlock::clear_blkid() {
  blkid_ = 0u;
  clear_has_blkid();
}
inline ::google::protobuf::uint32 FzBlock::blkid() const {
  return blkid_;
}
inline void FzBlock::set_blkid(::google::protobuf::uint32 value) {
  set_has_blkid();
  blkid_ = value;
}

// repeated .DAQ.FzFee fee = 2;
inline int FzBlock::fee_size() const {
  return fee_.size();
}
inline void FzBlock::clear_fee() {
  fee_.Clear();
}
inline const ::DAQ::FzFee& FzBlock::fee(int index) const {
  return fee_.Get(index);
}
inline ::DAQ::FzFee* FzBlock::mutable_fee(int index) {
  return fee_.Mutable(index);
}
inline ::DAQ::FzFee* FzBlock::add_fee() {
  return fee_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DAQ::FzFee >&
FzBlock::fee() const {
  return fee_;
}
inline ::google::protobuf::RepeatedPtrField< ::DAQ::FzFee >*
FzBlock::mutable_fee() {
  return &fee_;
}

// required bool len_error = 3;
inline bool FzBlock::has_len_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FzBlock::set_has_len_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FzBlock::clear_has_len_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FzBlock::clear_len_error() {
  len_error_ = false;
  clear_has_len_error();
}
inline bool FzBlock::len_error() const {
  return len_error_;
}
inline void FzBlock::set_len_error(bool value) {
  set_has_len_error();
  len_error_ = value;
}

// required bool crc_error = 4;
inline bool FzBlock::has_crc_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FzBlock::set_has_crc_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FzBlock::clear_has_crc_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FzBlock::clear_crc_error() {
  crc_error_ = false;
  clear_has_crc_error();
}
inline bool FzBlock::crc_error() const {
  return crc_error_;
}
inline void FzBlock::set_crc_error(bool value) {
  set_has_crc_error();
  crc_error_ = value;
}

// -------------------------------------------------------------------

// FzTrigInfo

// required uint32 id = 1;
inline bool FzTrigInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FzTrigInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FzTrigInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FzTrigInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 FzTrigInfo::id() const {
  return id_;
}
inline void FzTrigInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string attr = 2;
inline bool FzTrigInfo::has_attr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FzTrigInfo::set_has_attr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FzTrigInfo::clear_has_attr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FzTrigInfo::clear_attr() {
  if (attr_ != &::google::protobuf::internal::kEmptyString) {
    attr_->clear();
  }
  clear_has_attr();
}
inline const ::std::string& FzTrigInfo::attr() const {
  return *attr_;
}
inline void FzTrigInfo::set_attr(const ::std::string& value) {
  set_has_attr();
  if (attr_ == &::google::protobuf::internal::kEmptyString) {
    attr_ = new ::std::string;
  }
  attr_->assign(value);
}
inline void FzTrigInfo::set_attr(const char* value) {
  set_has_attr();
  if (attr_ == &::google::protobuf::internal::kEmptyString) {
    attr_ = new ::std::string;
  }
  attr_->assign(value);
}
inline void FzTrigInfo::set_attr(const char* value, size_t size) {
  set_has_attr();
  if (attr_ == &::google::protobuf::internal::kEmptyString) {
    attr_ = new ::std::string;
  }
  attr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FzTrigInfo::mutable_attr() {
  set_has_attr();
  if (attr_ == &::google::protobuf::internal::kEmptyString) {
    attr_ = new ::std::string;
  }
  return attr_;
}
inline ::std::string* FzTrigInfo::release_attr() {
  clear_has_attr();
  if (attr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attr_;
    attr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FzTrigInfo::set_allocated_attr(::std::string* attr) {
  if (attr_ != &::google::protobuf::internal::kEmptyString) {
    delete attr_;
  }
  if (attr) {
    set_has_attr();
    attr_ = attr;
  } else {
    clear_has_attr();
    attr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 value = 3;
inline bool FzTrigInfo::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FzTrigInfo::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FzTrigInfo::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FzTrigInfo::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 FzTrigInfo::value() const {
  return value_;
}
inline void FzTrigInfo::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// FzEvent

// required uint32 ec = 1;
inline bool FzEvent::has_ec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FzEvent::set_has_ec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FzEvent::clear_has_ec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FzEvent::clear_ec() {
  ec_ = 0u;
  clear_has_ec();
}
inline ::google::protobuf::uint32 FzEvent::ec() const {
  return ec_;
}
inline void FzEvent::set_ec(::google::protobuf::uint32 value) {
  set_has_ec();
  ec_ = value;
}

// repeated .DAQ.FzBlock block = 2;
inline int FzEvent::block_size() const {
  return block_.size();
}
inline void FzEvent::clear_block() {
  block_.Clear();
}
inline const ::DAQ::FzBlock& FzEvent::block(int index) const {
  return block_.Get(index);
}
inline ::DAQ::FzBlock* FzEvent::mutable_block(int index) {
  return block_.Mutable(index);
}
inline ::DAQ::FzBlock* FzEvent::add_block() {
  return block_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DAQ::FzBlock >&
FzEvent::block() const {
  return block_;
}
inline ::google::protobuf::RepeatedPtrField< ::DAQ::FzBlock >*
FzEvent::mutable_block() {
  return &block_;
}

// required uint32 regid = 3;
inline bool FzEvent::has_regid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FzEvent::set_has_regid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FzEvent::clear_has_regid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FzEvent::clear_regid() {
  regid_ = 0u;
  clear_has_regid();
}
inline ::google::protobuf::uint32 FzEvent::regid() const {
  return regid_;
}
inline void FzEvent::set_regid(::google::protobuf::uint32 value) {
  set_has_regid();
  regid_ = value;
}

// repeated .DAQ.FzTrigInfo trinfo = 4;
inline int FzEvent::trinfo_size() const {
  return trinfo_.size();
}
inline void FzEvent::clear_trinfo() {
  trinfo_.Clear();
}
inline const ::DAQ::FzTrigInfo& FzEvent::trinfo(int index) const {
  return trinfo_.Get(index);
}
inline ::DAQ::FzTrigInfo* FzEvent::mutable_trinfo(int index) {
  return trinfo_.Mutable(index);
}
inline ::DAQ::FzTrigInfo* FzEvent::add_trinfo() {
  return trinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DAQ::FzTrigInfo >&
FzEvent::trinfo() const {
  return trinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::DAQ::FzTrigInfo >*
FzEvent::mutable_trinfo() {
  return &trinfo_;
}

// -------------------------------------------------------------------

// FzEventSet

// repeated .DAQ.FzEvent ev = 1;
inline int FzEventSet::ev_size() const {
  return ev_.size();
}
inline void FzEventSet::clear_ev() {
  ev_.Clear();
}
inline const ::DAQ::FzEvent& FzEventSet::ev(int index) const {
  return ev_.Get(index);
}
inline ::DAQ::FzEvent* FzEventSet::mutable_ev(int index) {
  return ev_.Mutable(index);
}
inline ::DAQ::FzEvent* FzEventSet::add_ev() {
  return ev_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DAQ::FzEvent >&
FzEventSet::ev() const {
  return ev_;
}
inline ::google::protobuf::RepeatedPtrField< ::DAQ::FzEvent >*
FzEventSet::mutable_ev() {
  return &ev_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DAQ

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DAQ::FzData_FzDataType>() {
  return ::DAQ::FzData_FzDataType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DAQ::FzHit_FzFec>() {
  return ::DAQ::FzHit_FzFec_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DAQ::FzHit_FzTelescope>() {
  return ::DAQ::FzHit_FzTelescope_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DAQ::FzHit_FzDetector>() {
  return ::DAQ::FzHit_FzDetector_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DAQ::FzFee_FzFec>() {
  return ::DAQ::FzFee_FzFec_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_src_2fproto_2fFzEventSet_2eproto__INCLUDED
